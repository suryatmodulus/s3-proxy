{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Why ? \u00b6 First of all, yes, this is another S3 proxy written in Golang. I've created this project because I couldn't find any other that allow to proxy multiple S3 buckets or to have custom templates with OpenID Connect authentication and also to get, upload and delete files. Features \u00b6 Multi S3 bucket proxy Index document (display index document instead of listing when found) Custom templates AWS S3 Login from files or environment variables Custom S3 endpoints supported Basic Authentication support Multiple Basic Authentication support OpenID Connect Authentication support Multiple OpenID Connect Provider support Redirect to original host and path with OpenID Connect authentication Target mount point configuration with hostname and multiple path support Authentication by path and http method on each bucket Allow to publish files on S3 bucket Allow to delete files on S3 bucket Open Policy Agent integration for authorizations Configuration hot reload CORS support Prometheus metrics S3 Key Rewrite possibility See more information on these features in the \"Feature Guide\". Advanced interfaces \u00b6 Looking for more advanced interfaces. Take a look on this project: s3-proxy-interfaces . Provided interfaces in the project are really simple and based on NGinX template. Those are React based, with Material design and with customization. Want to contribute ? \u00b6 Read the CONTRIBUTING guide Inspired by \u00b6 pottava/aws-s3-proxy Thanks \u00b6 My wife BH to support me doing this Author \u00b6 Oxyno-zeta (Havrileck Alexandre) License \u00b6 Apache 2.0 (See in LICENSE)","title":"Home"},{"location":"#why","text":"First of all, yes, this is another S3 proxy written in Golang. I've created this project because I couldn't find any other that allow to proxy multiple S3 buckets or to have custom templates with OpenID Connect authentication and also to get, upload and delete files.","title":"Why ?"},{"location":"#features","text":"Multi S3 bucket proxy Index document (display index document instead of listing when found) Custom templates AWS S3 Login from files or environment variables Custom S3 endpoints supported Basic Authentication support Multiple Basic Authentication support OpenID Connect Authentication support Multiple OpenID Connect Provider support Redirect to original host and path with OpenID Connect authentication Target mount point configuration with hostname and multiple path support Authentication by path and http method on each bucket Allow to publish files on S3 bucket Allow to delete files on S3 bucket Open Policy Agent integration for authorizations Configuration hot reload CORS support Prometheus metrics S3 Key Rewrite possibility See more information on these features in the \"Feature Guide\".","title":"Features"},{"location":"#advanced-interfaces","text":"Looking for more advanced interfaces. Take a look on this project: s3-proxy-interfaces . Provided interfaces in the project are really simple and based on NGinX template. Those are React based, with Material design and with customization.","title":"Advanced interfaces"},{"location":"#want-to-contribute","text":"Read the CONTRIBUTING guide","title":"Want to contribute ?"},{"location":"#inspired-by","text":"pottava/aws-s3-proxy","title":"Inspired by"},{"location":"#thanks","text":"My wife BH to support me doing this","title":"Thanks"},{"location":"#author","text":"Oxyno-zeta (Havrileck Alexandre)","title":"Author"},{"location":"#license","text":"Apache 2.0 (See in LICENSE)","title":"License"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 \u2665 We love pull requests from everyone ! When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. So all code changes happen through Pull Requests \u00b6 Pull requests are the best way to propose changes to the codebase. We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. If you've added code that need documentation, update the documentation. Make sure your code follows the effective go guidelines as much as possible. Be sure to test your modifications. Write a good commit message following the conventionalcommits with the Angular convention. Issue that pull request! Code of conduct \u00b6 Please note by participating in this project, you agree to abide by the code of conduct . Any contributions you make will be under the Apache License 2.0 \u00b6 In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that's a concern. Report bugs using Github's issues \u00b6 We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy!","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"\u2665 We love pull requests from everyone ! When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change.","title":"Contributing"},{"location":"CONTRIBUTING/#so-all-code-changes-happen-through-pull-requests","text":"Pull requests are the best way to propose changes to the codebase. We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. If you've added code that need documentation, update the documentation. Make sure your code follows the effective go guidelines as much as possible. Be sure to test your modifications. Write a good commit message following the conventionalcommits with the Angular convention. Issue that pull request!","title":"So all code changes happen through Pull Requests"},{"location":"CONTRIBUTING/#code-of-conduct","text":"Please note by participating in this project, you agree to abide by the code of conduct .","title":"Code of conduct"},{"location":"CONTRIBUTING/#any-contributions-you-make-will-be-under-the-apache-license-20","text":"In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that's a concern.","title":"Any contributions you make will be under the Apache License 2.0"},{"location":"CONTRIBUTING/#report-bugs-using-githubs-issues","text":"We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy!","title":"Report bugs using Github's issues"},{"location":"migrate-v3-to-v4/","text":"Migrate from v3 to v4 \u00b6 Several breaking changes have been done during this release on the configuration: Targets Templates structure and naming TargetTemplates structure and naming Default template names Index document Those changes have been made in order to have a better merge feature on the configuration, for new features and to keep things in sync and organized. Here is a diff of the configuration with highlighted keys you will have to change during the upgrade: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 # Template configurations # templates: -# badRequest: templates/bad-request.tpl -# folderList: templates/folder-list.tpl -# forbidden: templates/forbidden.tpl -# internalServerError: templates/internal-server-error.tpl -# notFound: templates/not-found.tpl -# targetList: templates/target-list.tpl -# unauthorized: templates/unauthorized.tpl +# helpers: +# - templates/_helpers.tpl +# targetList: +# path: templates/target-list.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# folderList: +# path: templates/folder-list.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# badRequestError: +# path: templates/bad-request-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# forbiddenError: +# path: templates/forbidden-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# internalServerError: +# path: templates/internal-server-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# notFoundError: +# path: templates/not-found-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# unauthorizedError: +# path: templates/unauthorized-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' # Authentication Providers # authProviders: @@ -136,9 +159,9 @@ log: # password: # path: password1-in-file -# Targets +# Targets map targets: - - name: first-bucket + first-bucket: ## Mount point mount: path: @@ -189,18 +212,20 @@ targets: # authorizationOPAServer: # # OPA server url with data path # url: http://localhost:8181/v1/data/example/authz/allowed - # ## DEPRECATED Index document to display if exists in folder - # indexDocument: index.html # ## Actions # actions: # # Action for GET requests on target # GET: # # Will allow GET requests # enabled: true - # # Redirect with trailing slash when a file isn't found - # redirectWithTrailingSlashForNotFoundFile: true - # # Index document to display if exists in folder - # indexDocument: index.html + # # Configuration for GET requests + # config: + # # Redirect with trailing slash when a file isn't found + # redirectWithTrailingSlashForNotFoundFile: true + # # Index document to display if exists in folder + # indexDocument: index.html + # # Allow to add headers to streamed files (can be templated) + # streamedFileHeaders: {} # # Action for PUT requests on target # PUT: # # Will allow PUT requests @@ -229,30 +254,40 @@ targets: # target: /$two/$one/$three/$one/ ## Target custom templates # templates: + # # Helpers + # helpers: + # - inBucket: false + # path: \"\" # # Folder list template # folderList: # inBucket: false # path: \"\" - # # Not found template - # notFound: + # headers: {} + # # Not found error template + # notFoundError: # inBucket: false # path: \"\" + # headers: {} # # Internal server error template # internalServerError: # inBucket: false # path: \"\" - # # Forbidden template - # forbidden: + # headers: {} + # # Forbidden error template + # forbiddenError: # inBucket: false # path: \"\" - # # Unauthorized template - # unauthorized: + # headers: {} + # # Unauthorized error template + # unauthorizedError: # inBucket: false # path: \"\" - # # BadRequest template - # badRequest: + # headers: {} + # # Bad Request error template + # badRequestError: # inBucket: false # path: \"\" + # headers: {} ## Bucket configuration bucket: name: super-bucket","title":"Migrate from v3 to v4"},{"location":"migrate-v3-to-v4/#migrate-from-v3-to-v4","text":"Several breaking changes have been done during this release on the configuration: Targets Templates structure and naming TargetTemplates structure and naming Default template names Index document Those changes have been made in order to have a better merge feature on the configuration, for new features and to keep things in sync and organized. Here is a diff of the configuration with highlighted keys you will have to change during the upgrade: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 # Template configurations # templates: -# badRequest: templates/bad-request.tpl -# folderList: templates/folder-list.tpl -# forbidden: templates/forbidden.tpl -# internalServerError: templates/internal-server-error.tpl -# notFound: templates/not-found.tpl -# targetList: templates/target-list.tpl -# unauthorized: templates/unauthorized.tpl +# helpers: +# - templates/_helpers.tpl +# targetList: +# path: templates/target-list.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# folderList: +# path: templates/folder-list.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# badRequestError: +# path: templates/bad-request-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# forbiddenError: +# path: templates/forbidden-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# internalServerError: +# path: templates/internal-server-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# notFoundError: +# path: templates/not-found-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' +# unauthorizedError: +# path: templates/unauthorized-error.tpl +# headers: +# Content-Type: '{{ template \"main.headers.contentType\" . }}' # Authentication Providers # authProviders: @@ -136,9 +159,9 @@ log: # password: # path: password1-in-file -# Targets +# Targets map targets: - - name: first-bucket + first-bucket: ## Mount point mount: path: @@ -189,18 +212,20 @@ targets: # authorizationOPAServer: # # OPA server url with data path # url: http://localhost:8181/v1/data/example/authz/allowed - # ## DEPRECATED Index document to display if exists in folder - # indexDocument: index.html # ## Actions # actions: # # Action for GET requests on target # GET: # # Will allow GET requests # enabled: true - # # Redirect with trailing slash when a file isn't found - # redirectWithTrailingSlashForNotFoundFile: true - # # Index document to display if exists in folder - # indexDocument: index.html + # # Configuration for GET requests + # config: + # # Redirect with trailing slash when a file isn't found + # redirectWithTrailingSlashForNotFoundFile: true + # # Index document to display if exists in folder + # indexDocument: index.html + # # Allow to add headers to streamed files (can be templated) + # streamedFileHeaders: {} # # Action for PUT requests on target # PUT: # # Will allow PUT requests @@ -229,30 +254,40 @@ targets: # target: /$two/$one/$three/$one/ ## Target custom templates # templates: + # # Helpers + # helpers: + # - inBucket: false + # path: \"\" # # Folder list template # folderList: # inBucket: false # path: \"\" - # # Not found template - # notFound: + # headers: {} + # # Not found error template + # notFoundError: # inBucket: false # path: \"\" + # headers: {} # # Internal server error template # internalServerError: # inBucket: false # path: \"\" - # # Forbidden template - # forbidden: + # headers: {} + # # Forbidden error template + # forbiddenError: # inBucket: false # path: \"\" - # # Unauthorized template - # unauthorized: + # headers: {} + # # Unauthorized error template + # unauthorizedError: # inBucket: false # path: \"\" - # # BadRequest template - # badRequest: + # headers: {} + # # Bad Request error template + # badRequestError: # inBucket: false # path: \"\" + # headers: {} ## Bucket configuration bucket: name: super-bucket","title":"Migrate from v3 to v4"},{"location":"configuration/example/","text":"Example \u00b6 Note The following example is a full file example. But this can be split in multiple files, it will be merged by S3-Proxy automatically. Here is a full example of a configuration file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 # Log configuration log : # Log level level : info # Log format format : text # Log file path # filePath: # Server configurations # server: # listenAddr: \"\" # port: 8080 # # Server timeout options # timeouts: # readTimeout: \"\" # readHeaderTimeout: \"\" # writeTimeout: \"\" # idleTimeout: \"\" # # Compress options # compress: # enabled: true # # Compression level # # level: 5 # # Types # # types: # # - text/html # # - text/css # # - text/plain # # - text/javascript # # - application/javascript # # - application/x-javascript # # - application/json # # - application/atom+xml # # - application/rss+xml # # - image/svg+xml # # CORS configuration # cors: # # Enabled # enabled: false # # Allow all traffic # allowAll: true # # Allow Origins # # Example: https://fake.com # allowOrigins: [] # # Allow HTTP Methods # allowMethods: [] # # Allow Headers # allowHeaders: [] # # Expose Headers # exposeHeaders: [] # # Max age # # 300 is the maximum value not ignored by any of major browsers # # Source: https://github.com/go-chi/cors # maxAge: 0 # # Allow credentials # allowCredentials: false # # Run debug # debug: false # # OPTIONS method Passthrough # optionsPassthrough: false # # Cache configuration # cache: # # Force no cache headers on all responses # noCacheEnabled: true # # Expires header value # expires: # # Cache-control header value # cacheControl: # # Pragma header value # pragma: # # X-Accel-Expires header value # xAccelExpires: # # SSL/TLS configuration # ssl: # # Is SSL/TLS configuration enabled ? # enabled: true # # Certificates to serve when connected # certificates: # - # Note: Exactly one of certificate/certificateUrl and privateKey/privateKeyUrl must be specified. # # The PEM encoded certificate # certificate: | # -----BEGIN CERTIFICATE----- # .... # -----END CERTIFICATE----- # # The URL of a resource containing the certificate # # Check other URL types in documentation # certificateUrl: arn:aws:ssm:region:accountId:parameter/name # # Additional URL configuration if certificateUrl is an S3 URL # certificateUrlConfig: # # Timeout for HTTP connections (including AWS calls) to get SSL certificate/keys # httpTimeout: # # AWS region for S3/SSM/Secrets Manager-stored documents # awsRegion: us-east-1 # # Custom endpoint for S3/SSM/Secrets Manager API calls # awsEndpoint: # # Credentials to access AWS-based documents # awsCredentials: # accessKey: # env: AWS_ACCESS_KEY_ID # secretKey: # path: secret_key_file # # Disable SSL for AWS API calls. This does not affect `https` URLs # awsDisableSSL: false # # The PEM encoded private key # privateKey: | # -----BEGIN RSA PRIVATE KEY----- # -----END RSA PRIVATE KEY----- # # Additional URL configuration if privateKeyUrl is an S3 URL # # Check other URL types in documentation # privateKeyUrl: arn:aws:secretsmanager:region:accountId:secret/name # # Additional URL configuration if privateKeyUrl is an S3 URL # privateKeyUrlConfig: # # Timeout for HTTP connections (including AWS calls) to get SSL certificate/keys # httpTimeout: # # AWS region for S3/SSM/Secrets Manager-stored documents # awsRegion: us-east-1 # # Custom endpoint for S3/SSM/Secrets Manager API calls # awsEndpoint: # # Credentials to access AWS-based documents # awsCredentials: # accessKey: # env: AWS_ACCESS_KEY_ID # secretKey: # path: secret_key_file # # Disable SSL for AWS API calls. This does not affect `https` URLs # awsDisableSSL: false # # List of hostnames to generate self-signed certificates for # selfSignedHostnames: # - localhost # - localhost.localdomain # # The minimum TLS version to allow when a client connects # minTLSVersion: TLSv1.2 # # The maximum TLS version to allow when a client connects # maxTLSVersion: TLSv1.3 # # The TLS ciphers to enable # cipherSuites: # See https://pkg.go.dev/crypto/tls#pkg-constants for valid names; the current default is shown below. # - TLS_AES_128_GCM_SHA256 # - TLS_AES_256_GCM_SHA384 # - TLS_CHACHA20_POLY1305_SHA256 # - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 # - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 # - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 # Template configurations # templates: # helpers: # - templates/_helpers.tpl # targetList: # path: templates/target-list.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"200\" # folderList: # path: templates/folder-list.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"200\" # badRequestError: # path: templates/bad-request-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"400\" # forbiddenError: # path: templates/forbidden-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"403\" # internalServerError: # path: templates/internal-server-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"500\" # notFoundError: # path: templates/not-found-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"404\" # unauthorizedError: # path: templates/unauthorized-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"401\" # put: # path: templates/put.tpl # headers: {} # status: \"204\" # delete: # path: templates/delete.tpl # headers: {} # status: \"204\" # Authentication Providers # authProviders: # # Header providers # # This authentication method should be used only with a software like [Oauth2-proxy](https://github.com/oauth2-proxy/oauth2-proxy) or an authentication gateway that put headers with user information inside. # # Warning: S3-proxy won't validate headers value or anything else. It will take values as they are coming. # header: # oauth2-proxy: # usernameHeader: x-forwarded-preferred-username # emailHeader: x-forwarded-email # groupsHeader: x-forwarded-groups # # OIDC providers # oidc: # provider1: # clientID: client-id # clientSecret: # path: client-secret-in-file # client secret file # state: my-secret-state-key # do not use this in production ! put something random here # issuerUrl: https://issuer-url/ # redirectUrl: http://localhost:8080/ # /auth/oidc/callback will be added automatically # scopes: # OIDC Scopes (defaults: openid, email, profile) # - openid # - email # - profile # groupClaim: groups # path in token # # cookieDomains: [] # Cookie domains matching the request host # # cookieSecure: true # Is the cookie generated secure ? # # cookieName: oidc # Cookie generated name # emailVerified: true # check email verified field from token # # loginPath: /auth/provider1 # Override login path dynamically generated from provider key # # callbackPath: /auth/provider1/callback # Override callback path dynamically generated from provider key # # Basic auth providers # basic: # provider2: # realm: My Basic Auth Realm # List targets feature # This will generate a webpage with list of targets with links using targetList template # listTargets: # # To enable the list targets feature # enabled: false # ## Mount point # mount: # path: # - / # # A specific host can be added for filtering. Otherwise, all hosts will be accepted # # host: localhost:8080 # ## Resource configuration # resource: # # A Path must be declared for a resource filtering # path: / # # HTTP Methods authorized (Must be in GET, PUT or DELETE) # methods: # - GET # - PUT # - DELETE # # Whitelist # whitelist: false # # A authentication provider declared in section before, here is the key name # provider: provider1 # # OIDC section for access filter # oidc: # # NOTE: This list can be empty ([]) for authentication only and no group filter # authorizationAccesses: # Authorization accesses : groups or email or regexp # - group: devops_users # # Header section for access filter # header: # # NOTE: This list can be empty ([]) for authentication only and no group filter # authorizationAccesses: # Authorization accesses : groups or email or regexp # - group: devops_users # # Basic authentication section # basic: # credentials: # - user: user1 # password: # path: password1-in-file # Targets map targets : first-bucket : ## Mount point mount : path : - / # A specific host can be added for filtering. Otherwise, all hosts will be accepted # host: localhost:8080 # ## Resources declaration # ## WARNING: Think about all path that you want to protect. At the end of the list, you should add a resource filter for /* otherwise, it will be public. # resources: # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: / # # Whitelist # whiteList: true # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /specific_doc/* # # HTTP Methods authorized (Must be in GET, PUT or DELETE) # methods: # - GET # - PUT # - DELETE # # A authentication provider declared in section before, here is the key name # provider: provider1 # # OIDC section for access filter # oidc: # # NOTE: This list can be empty ([]) for authentication only and no group filter # authorizationAccesses: # Authorization accesses : groups or email or regexp # - group: specific_users # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /directory1/* # # HTTP Methods authorized (Must be in GET, PUT or DELETE) # methods: # - GET # - PUT # - DELETE # # A authentication provider declared in section before, here is the key name # provider: provider1 # # Basic authentication section # basic: # credentials: # - user: user1 # password: # path: password1-in-file # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /opa-protected/* # # OIDC section for access filter # oidc: # # Authorization through OPA server configuration # authorizationOPAServer: # # OPA server url with data path # url: http://localhost:8181/v1/data/example/authz/allowed # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /specific_doc/* # # HTTP Methods authorized (Must be in GET, PUT or DELETE) # methods: # - GET # - PUT # - DELETE # # A authentication provider declared in section before, here is the key name # provider: provider1 # # Header section for access filter # header: # # NOTE: This list can be empty ([]) for authentication only and no group filter # authorizationAccesses: # Authorization accesses : groups or email or regexp # - group: specific_users # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /opa-protected/* # # Header section for access filter # header: # # Authorization through OPA server configuration # authorizationOPAServer: # # OPA server url with data path # url: http://localhost:8181/v1/data/example/authz/allowed # ## Actions # actions: # # Action for GET requests on target # GET: # # Will allow GET requests # enabled: true # # Configuration for GET requests # config: # # Redirect with trailing slash when a file isn't found # redirectWithTrailingSlashForNotFoundFile: true # # Index document to display if exists in folder # indexDocument: index.html # # Allow to add headers to streamed files (can be templated) # streamedFileHeaders: {} # # Webhooks # webhooks: [] # # Action for PUT requests on target # PUT: # # Will allow PUT requests # enabled: true # # Configuration for PUT requests # config: # # Metadata key/values that will be put on S3 objects. # # Values can be templated. Empty values will be flushed. # metadata: # key: value # # Storage class that will be used for uploaded objects # # See storage class here: https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html # # Values can be templated. Empty values will be flushed. # storageClass: STANDARD # GLACIER, ... # # Will allow override objects if enabled # allowOverride: false # # Webhooks # webhooks: [] # # Action for DELETE requests on target # DELETE: # # Will allow DELETE requests # enabled: true # # Configuration for DELETE requests # config: # # Webhooks # webhooks: [] # # Key rewrite list # # This will allow to rewrite keys before doing any requests to S3 # # For more information about how this works, see in the documentation. # keyRewriteList: # - # Source represents a Regexp (golang format with group naming support) # source: ^/(?P<one>\\w+)/(?P<two>\\w+)/(?P<three>\\w+)?$ # # Target type: Regex or Template # # Regex will allow to do a simple regex replace/update, like in the example # # Template will allow to do golang template replace, like this example as \"target\" value: {{ regexReplaceAll \"/input1(/.*)\" .Key (printf \"/input1/%s${1}\" .User.Username) }} # # targetType: REGEX # TEMPLATE # # Target represents the template of the new key that will be used # target: /$two/$one/$three/$one/ ## Target custom templates # templates: # # Helpers # helpers: # - inBucket: false # path: \"\" # # Folder list template # folderList: # inBucket: false # path: \"\" # headers: {} # status: \"200\" # # Not found error template # notFoundError: # inBucket: false # path: \"\" # headers: {} # status: \"404\" # # Internal server error template # internalServerError: # inBucket: false # path: \"\" # headers: {} # status: \"500\" # # Forbidden error template # forbiddenError: # inBucket: false # path: \"\" # headers: {} # status: \"403\" # # Unauthorized error template # unauthorizedError: # inBucket: false # path: \"\" # headers: {} # status: \"401\" # # Bad Request error template # badRequestError: # inBucket: false # path: \"\" # headers: {} # status: \"400\" # # PUT template # put: # inBucket: false # path: \"\" # headers: {} # status: \"204\" # # DELETE template # delete: # inBucket: false # path: \"\" # headers: {} # status: \"204\" ## Bucket configuration bucket : name : super-bucket prefix : region : eu-west-1 s3Endpoint : disableSSL : false # s3ListMaxKeys: 1000 # credentials: # accessKey: # env: AWS_ACCESS_KEY_ID # secretKey: # path: secret_key_file","title":"Example"},{"location":"configuration/example/#example","text":"Note The following example is a full file example. But this can be split in multiple files, it will be merged by S3-Proxy automatically. Here is a full example of a configuration fileog configuration log : # Log level level : info # Log format format : text # Log file path # filePath: # Server configurations # server: # listenAddr: \"\" # port: 8080 # # Server timeout options # timeouts: # readTimeout: \"\" # readHeaderTimeout: \"\" # writeTimeout: \"\" # idleTimeout: \"\" # # Compress options # compress: # enabled: true # # Compression level # # level: 5 # # Types # # types: # # - text/html # # - text/css # # - text/plain # # - text/javascript # # - application/javascript # # - application/x-javascript # # - application/json # # - application/atom+xml # # - application/rss+xml # # - image/svg+xml # # CORS configuration # cors: # # Enabled # enabled: false # # Allow all traffic # allowAll: true # # Allow Origins # # Example: https://fake.com # allowOrigins: [] # # Allow HTTP Methods # allowMethods: [] # # Allow Headers # allowHeaders: [] # # Expose Headers # exposeHeaders: [] # # Max age # # 300 is the maximum value not ignored by any of major browsers # # Source: https://github.com/go-chi/cors # maxAge: 0 # # Allow credentials # allowCredentials: false # # Run debug # debug: false # # OPTIONS method Passthrough # optionsPassthrough: false # # Cache configuration # cache: # # Force no cache headers on all responses # noCacheEnabled: true # # Expires header value # expires: # # Cache-control header value # cacheControl: # # Pragma header value # pragma: # # X-Accel-Expires header value # xAccelExpires: # # SSL/TLS configuration # ssl: # # Is SSL/TLS configuration enabled ? # enabled: true # # Certificates to serve when connected # certificates: # - # Note: Exactly one of certificate/certificateUrl and privateKey/privateKeyUrl must be specified. # # The PEM encoded certificate # certificate: | # -----BEGIN CERTIFICATE----- # .... # -----END CERTIFICATE----- # # The URL of a resource containing the certificate # # Check other URL types in documentation # certificateUrl: arn:aws:ssm:region:accountId:parameter/name # # Additional URL configuration if certificateUrl is an S3 URL # certificateUrlConfig: # # Timeout for HTTP connections (including AWS calls) to get SSL certificate/keys # httpTimeout: # # AWS region for S3/SSM/Secrets Manager-stored documents # awsRegion: us-east-1 # # Custom endpoint for S3/SSM/Secrets Manager API calls # awsEndpoint: # # Credentials to access AWS-based documents # awsCredentials: # accessKey: # env: AWS_ACCESS_KEY_ID # secretKey: # path: secret_key_file # # Disable SSL for AWS API calls. This does not affect `https` URLs # awsDisableSSL: false # # The PEM encoded private key # privateKey: | # -----BEGIN RSA PRIVATE KEY----- # -----END RSA PRIVATE KEY----- # # Additional URL configuration if privateKeyUrl is an S3 URL # # Check other URL types in documentation # privateKeyUrl: arn:aws:secretsmanager:region:accountId:secret/name # # Additional URL configuration if privateKeyUrl is an S3 URL # privateKeyUrlConfig: # # Timeout for HTTP connections (including AWS calls) to get SSL certificate/keys # httpTimeout: # # AWS region for S3/SSM/Secrets Manager-stored documents # awsRegion: us-east-1 # # Custom endpoint for S3/SSM/Secrets Manager API calls # awsEndpoint: # # Credentials to access AWS-based documents # awsCredentials: # accessKey: # env: AWS_ACCESS_KEY_ID # secretKey: # path: secret_key_file # # Disable SSL for AWS API calls. This does not affect `https` URLs # awsDisableSSL: false # # List of hostnames to generate self-signed certificates for # selfSignedHostnames: # - localhost # - localhost.localdomain # # The minimum TLS version to allow when a client connects # minTLSVersion: TLSv1.2 # # The maximum TLS version to allow when a client connects # maxTLSVersion: TLSv1.3 # # The TLS ciphers to enable # cipherSuites: # See https://pkg.go.dev/crypto/tls#pkg-constants for valid names; the current default is shown below. # - TLS_AES_128_GCM_SHA256 # - TLS_AES_256_GCM_SHA384 # - TLS_CHACHA20_POLY1305_SHA256 # - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 # - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 # - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 # Template configurations # templates: # helpers: # - templates/_helpers.tpl # targetList: # path: templates/target-list.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"200\" # folderList: # path: templates/folder-list.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"200\" # badRequestError: # path: templates/bad-request-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"400\" # forbiddenError: # path: templates/forbidden-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"403\" # internalServerError: # path: templates/internal-server-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"500\" # notFoundError: # path: templates/not-found-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"404\" # unauthorizedError: # path: templates/unauthorized-error.tpl # headers: # Content-Type: '{{ template \"main.headers.contentType\" . }}' # status: \"401\" # put: # path: templates/put.tpl # headers: {} # status: \"204\" # delete: # path: templates/delete.tpl # headers: {} # status: \"204\" # Authentication Providers # authProviders: # # Header providers # # This authentication method should be used only with a software like [Oauth2-proxy](https://github.com/oauth2-proxy/oauth2-proxy) or an authentication gateway that put headers with user information inside. # # Warning: S3-proxy won't validate headers value or anything else. It will take values as they are coming. # header: # oauth2-proxy: # usernameHeader: x-forwarded-preferred-username # emailHeader: x-forwarded-email # groupsHeader: x-forwarded-groups # # OIDC providers # oidc: # provider1: # clientID: client-id # clientSecret: # path: client-secret-in-file # client secret file # state: my-secret-state-key # do not use this in production ! put something random here # issuerUrl: https://issuer-url/ # redirectUrl: http://localhost:8080/ # /auth/oidc/callback will be added automatically # scopes: # OIDC Scopes (defaults: openid, email, profile) # - openid # - email # - profile # groupClaim: groups # path in token # # cookieDomains: [] # Cookie domains matching the request host # # cookieSecure: true # Is the cookie generated secure ? # # cookieName: oidc # Cookie generated name # emailVerified: true # check email verified field from token # # loginPath: /auth/provider1 # Override login path dynamically generated from provider key # # callbackPath: /auth/provider1/callback # Override callback path dynamically generated from provider key # # Basic auth providers # basic: # provider2: # realm: My Basic Auth Realm # List targets feature # This will generate a webpage with list of targets with links using targetList template # listTargets: # # To enable the list targets feature # enabled: false # ## Mount point # mount: # path: # - / # # A specific host can be added for filtering. Otherwise, all hosts will be accepted # # host: localhost:8080 # ## Resource configuration # resource: # # A Path must be declared for a resource filtering # path: / # # HTTP Methods authorized (Must be in GET, PUT or DELETE) # methods: # - GET # - PUT # - DELETE # # Whitelist # whitelist: false # # A authentication provider declared in section before, here is the key name # provider: provider1 # # OIDC section for access filter # oidc: # # NOTE: This list can be empty ([]) for authentication only and no group filter # authorizationAccesses: # Authorization accesses : groups or email or regexp # - group: devops_users # # Header section for access filter # header: # # NOTE: This list can be empty ([]) for authentication only and no group filter # authorizationAccesses: # Authorization accesses : groups or email or regexp # - group: devops_users # # Basic authentication section # basic: # credentials: # - user: user1 # password: # path: password1-in-file # Targets map targets : first-bucket : ## Mount point mount : path : - / # A specific host can be added for filtering. Otherwise, all hosts will be accepted # host: localhost:8080 # ## Resources declaration # ## WARNING: Think about all path that you want to protect. At the end of the list, you should add a resource filter for /* otherwise, it will be public. # resources: # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: / # # Whitelist # whiteList: true # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /specific_doc/* # # HTTP Methods authorized (Must be in GET, PUT or DELETE) # methods: # - GET # - PUT # - DELETE # # A authentication provider declared in section before, here is the key name # provider: provider1 # # OIDC section for access filter # oidc: # # NOTE: This list can be empty ([]) for authentication only and no group filter # authorizationAccesses: # Authorization accesses : groups or email or regexp # - group: specific_users # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /directory1/* # # HTTP Methods authorized (Must be in GET, PUT or DELETE) # methods: # - GET # - PUT # - DELETE # # A authentication provider declared in section before, here is the key name # provider: provider1 # # Basic authentication section # basic: # credentials: # - user: user1 # password: # path: password1-in-file # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /opa-protected/* # # OIDC section for access filter # oidc: # # Authorization through OPA server configuration # authorizationOPAServer: # # OPA server url with data path # url: http://localhost:8181/v1/data/example/authz/allowed # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /specific_doc/* # # HTTP Methods authorized (Must be in GET, PUT or DELETE) # methods: # - GET # - PUT # - DELETE # # A authentication provider declared in section before, here is the key name # provider: provider1 # # Header section for access filter # header: # # NOTE: This list can be empty ([]) for authentication only and no group filter # authorizationAccesses: # Authorization accesses : groups or email or regexp # - group: specific_users # # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path) # - path: /opa-protected/* # # Header section for access filter # header: # # Authorization through OPA server configuration # authorizationOPAServer: # # OPA server url with data path # url: http://localhost:8181/v1/data/example/authz/allowed # ## Actions # actions: # # Action for GET requests on target # GET: # # Will allow GET requests # enabled: true # # Configuration for GET requests # config: # # Redirect with trailing slash when a file isn't found # redirectWithTrailingSlashForNotFoundFile: true # # Index document to display if exists in folder # indexDocument: index.html # # Allow to add headers to streamed files (can be templated) # streamedFileHeaders: {} # # Webhooks # webhooks: [] # # Action for PUT requests on target # PUT: # # Will allow PUT requests # enabled: true # # Configuration for PUT requests # config: # # Metadata key/values that will be put on S3 objects. # # Values can be templated. Empty values will be flushed. # metadata: # key: value # # Storage class that will be used for uploaded objects # # See storage class here: https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html # # Values can be templated. Empty values will be flushed. # storageClass: STANDARD # GLACIER, ... # # Will allow override objects if enabled # allowOverride: false # # Webhooks # webhooks: [] # # Action for DELETE requests on target # DELETE: # # Will allow DELETE requests # enabled: true # # Configuration for DELETE requests # config: # # Webhooks # webhooks: [] # # Key rewrite list # # This will allow to rewrite keys before doing any requests to S3 # # For more information about how this works, see in the documentation. # keyRewriteList: # - # Source represents a Regexp (golang format with group naming support) # source: ^/(?P<one>\\w+)/(?P<two>\\w+)/(?P<three>\\w+)?$ # # Target type: Regex or Template # # Regex will allow to do a simple regex replace/update, like in the example # # Template will allow to do golang template replace, like this example as \"target\" value: {{ regexReplaceAll \"/input1(/.*)\" .Key (printf \"/input1/%s${1}\" .User.Username) }} # # targetType: REGEX # TEMPLATE # # Target represents the template of the new key that will be used # target: /$two/$one/$three/$one/ ## Target custom templates # templates: # # Helpers # helpers: # - inBucket: false # path: \"\" # # Folder list template # folderList: # inBucket: false # path: \"\" # headers: {} # status: \"200\" # # Not found error template # notFoundError: # inBucket: false # path: \"\" # headers: {} # status: \"404\" # # Internal server error template # internalServerError: # inBucket: false # path: \"\" # headers: {} # status: \"500\" # # Forbidden error template # forbiddenError: # inBucket: false # path: \"\" # headers: {} # status: \"403\" # # Unauthorized error template # unauthorizedError: # inBucket: false # path: \"\" # headers: {} # status: \"401\" # # Bad Request error template # badRequestError: # inBucket: false # path: \"\" # headers: {} # status: \"400\" # # PUT template # put: # inBucket: false # path: \"\" # headers: {} # status: \"204\" # # DELETE template # delete: # inBucket: false # path: \"\" # headers: {} # status: \"204\" ## Bucket configuration bucket : name : super-bucket prefix : region : eu-west-1 s3Endpoint : disableSSL : false # s3ListMaxKeys: 1000 # credentials: # accessKey: # env: AWS_ACCESS_KEY_ID # secretKey: # path: secret_key_file","title":"Example"},{"location":"configuration/structure/","text":"Structure \u00b6 The configuration must be set in multiple YAML files located in conf/ folder from the current working directory. You can create multiple files containing different part of the configuration. A global merge will be done across all data in all files. Moreover, the configuration files will be watched for modifications. You can see a full example in the Example section Main structure \u00b6 Key Type Required Default Description log LogConfiguration No None Log configurations server ServerConfiguration No None Server configurations internalServer ServerConfiguration No None Internal Server configurations template TemplateConfiguration No None Template configurations targets Map[String] targetconfiguration No None Targets configuration. Map key will be considered as the target name. (This will used in urls and list of targets.) authProviders AuthProvidersConfiguration No None Authentication providers configuration listTargets ListTargetsConfiguration No None List targets feature configuration LogConfiguration \u00b6 Key Type Required Default Description level String No info Log level format String No json Log format (available values are: json or text ) filePath String No \"\" Log file path ServerConfiguration \u00b6 Key Type Required Default Description listenAddr String No \"\" Listen Address (Important: Cannot be hot reloaded) port Integer No 8080 Listening Port (Important: Cannot be hot reloaded) cors ServerCorsConfig No None CORS configuration cache ServerCacheConfig No None Cache configuration ssl ServerSSLConfig No None SSL/TLS configuration (Important: Cannot be hot reloaded) ServerTimeoutsConfig \u00b6 Key Type Required Default Description readTimeout string No \"\" Server read timeout readHeaderTimeout string No \"60s\" (to avoid Slowloris attack) Server read header timeout writeTimeout string No \"\" Server write timeout idleTimeout string No \"\" Server idle timeout ServerCompressConfig \u00b6 Key Type Required Default Description enabled Boolean No true Is the compression enabled ? level Integer No 5 The level of GZip compression types [String] No [\"text/html\",\"text/css\",\"text/plain\",\"text/javascript\",\"application/javascript\",\"application/x-javascript\",\"application/json\",\"application/atom+xml\",\"application/rss+xml\",\"image/svg+xml\"] The content type list compressed in output ServerCacheConfig \u00b6 Key Type Required Default Description noCacheEnabled Boolean false false Force no cache headers on all responses expires String false \"\" Expires header value cacheControl String false \"\" Cache-Control header value pragma String false \"\" Pragma header value xAccelExpires String false \"\" X-Accel-Expires header value See more information here . ServerCorsConfig \u00b6 This feature is powered by go-chi/cors . You can read more documentation about all field there. Key Type Required Default Description enabled Boolean No false Is CORS support enabled ? allowAll Boolean No false Allow all CORS requests with all origins, all HTTP methods, etc ? allowOrigins [String] No Allow origins array. Example: https://fake.com . This support stars in origins. allowMethods [String] No Allow HTTP Methods allowHeaders [String] No Allow headers exposeHeaders [String] No Expose headers maxAge Integer No Max age. 300 is the maximum value not ignored by any of major browsers. allowCredentials Boolean No Allow credentials debug Boolean No Debug mode for go-chi/cors optionsPassthrough Boolean No OPTIONS method Passthrough ServerSSLCertificate \u00b6 Key Type Required Default Description certificate String Yes[1] None The PEM encoded certificate. certificateUrl String Yes[1] None The URL of a resource containing the certificate. certificateUrlConfig SSLURLConfig No None Additional URL configuration if certificateUrl is an S3 URL. privateKey String Yes[2] None The PEM encoded private key. privateKeyUrl String Yes[2] None The URL of a resource containing the private key. privateKeyUrlConfig SSLURLConfig No None Additional URL configuration if privateKeyUrl is an S3 URL. Notes: [1] Exactly one of certificate or certificateUrl must be specified. [2] Exactly one of privateKey or privateKeyUrl must be specified. Allowed URL types are: Local files, in file:/// absolute / path / filename , file:// relative / path / filename , / absolute / path / filename , or relative / path / filename form. HTTP/HTTPS URLs in https:// host [: port ]/ path form. AWS S3 URLs in either s3:// bucket / key or arn: partition :s3::: bucket / key form. AWS Secrets Manager ARNs in arn: partition :secretsmanager: region : account-id :secret/ secret-name form. AWS Systems Manager parameter ARNs in arn: partition :ssm: region : account-id :parameter/ path / name form. ServerSSLConfig \u00b6 Key Type Required Default Description enabled Boolean No false Whether SSL support should be enabled. certificates [ ServerSSLCertificate ] No [] Certificates to serve when connected. selfSignedHostnames [String] No [] List of hostnames to generate self-signed certificates for. minTLSVersion String No \"TLSv1.2\" The minimum TLS version to allow when a client connects. maxTLSVersion String No None The maximum TLS version to allow when a client connects. cipherSuites [String] No See below The TLS ciphers to enable. The values for cipherSuites are the constant names in the Go crypto/tls package, starting with TLS_ . The default ciphers are the recommended cipher suites from ciphersuite.info supported by Go: TLS_AES_128_GCM_SHA256 TLS_AES_256_GCM_SHA384 TLS_CHACHA20_POLY1305_SHA256 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 SSLURLConfig \u00b6 This is a subset/modification of the configuration available from BucketConfiguration . Key Type Required Default Description httpTimeout String (duration) No None Timeout for HTTP connections (including AWS calls) to get SSL certificate/keys. awsRegion String No us-east-1 AWS region for S3/SSM/Secrets Manager-stored documents. awsEndpoint String No None Custom endpoint for S3/SSM/Secrets Manager API calls. awsCredentials BucketCredentialConfiguration No None Credentials to access AWS-based documents awsDisableSSL Boolean No false Disable SSL for AWS API calls. This does not affect https URLs. TemplateConfiguration \u00b6 Warning Override headers will remove the default value containing the Content-Type header. Why ? Because it was though that it was better to know why it is override and not have magical values coming from nowhere. Key Type Required Default Description helpers [String] No [templates/_helpers.tpl] Template Golang helpers targetList TemplateConfigurationItem No targetList: { path: \"templates/target-list.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"200\" } Target list template configuration. More information here . folderList TemplateConfigurationItem No folderList: { path: \"templates/folder-list.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"200\" } Folder list template configuration. More information here . notFoundError TemplateConfigurationItem No notFoundError: { path: \"templates/not-found-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"404\" } Not found template configuration. More information here . unauthorizedError TemplateConfigurationItem No unauthorizedError: { path: \"templates/unauthorized-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"401\" } Unauthorized template configuration. More information here . forbiddenError TemplateConfigurationItem No forbiddenError: { path: \"templates/forbidden-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"403\" } Forbidden template configuration. More information here . badRequestError TemplateConfigurationItem No badRequestError: { path: \"templates/bad-request-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"400\" } Bad Request template configuration. More information here . internalServerError TemplateConfigurationItem No internalServerError: { path: \"templates/internal-server-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"500\" } Internal server error template configuration. More information here . put TemplateConfigurationItem No put: { path: \"templates/put.tpl\", headers: {}, status: \"204\" } PUT response template configuration. More information here . delete TemplateConfigurationItem No delete: { path: \"templates/put.tpl\", headers: {}, status: \"204\" } DELETE response template configuration. More information here . TemplateConfigurationItem \u00b6 Key Type Required Default Description path String True \"\" File path to template file headers Map[String]String False None Headers containing templates. Key corresponds to header and value to the template. If templated value is empty, the header won't be added to answer. More information here . status String False \"\" Status code template. It will be parsed to get an integer. TargetConfiguration \u00b6 Key Type Required Default Description bucket BucketConfiguration Yes None Bucket configuration resources [Resource] No None Resources declaration for path whitelist or specific authentication on path list. WARNING: Think about all path that you want to protect. At the end of the list, you should add a resource filter for /* otherwise, it will be public. mount MountConfiguration Yes None Mount point configuration actions ActionsConfiguration No GET action enabled Actions allowed on target (GET, PUT or DELETE) keyRewriteList [KeyRewrite] No None Key rewrite list is here to allow rewriting keys before sending request to S3 (See more information here ) templates TargetTemplateConfig No None Custom target templates from files on local filesystem or in bucket KeyRewrite \u00b6 See more information here . Key Type Required Default Description source String Required None Source regexp matcher with golang group naming support. targetType String No REGEX Possible values are REGEX or TEMPLATE . target String Required None Target template for new key send to S3. TargetTemplateConfig \u00b6 Key Type Required Default Description helpers [ TargetHelperConfigItem ] No None Helpers list custom template declarations. folderList TargetTemplateConfigItem No None Folder list custom template declaration. More information here . notFoundError TargetTemplateConfigItem No None Not Found custom template declaration. More information here . internalServerError TargetTemplateConfigItem No None Internal server error custom template declaration. More information here . forbiddenError TargetTemplateConfigItem No None Forbidden custom template declaration. More information here . unauthorizedError TargetTemplateConfigItem No None Unauthorized custom template declaration. More information here . badRequestError TargetTemplateConfigItem No None Bad Request custom template declaration. More information here . put TargetTemplateConfigItem No None PUT custom template declaration. More information here . delete TargetTemplateConfigItem No None DELETE custom template declaration. More information here . TargetHelperConfigItem \u00b6 Key Type Required Default Description inBucket Boolean No false Is the file in bucket or on local file system ? path String Yes None Path for template file TargetTemplateConfigItem \u00b6 Key Type Required Default Description inBucket Boolean No false Is the file in bucket or on local file system ? path String Yes None Path for template file headers Map[String]String False This will be set to corresponding TemplateConfiguration if empty. Headers containing templates. Key corresponds to header and value to the template. If templated value is empty, the header won't be added to answer. More information here . status String Yes None Status code template. It will be parsed to get an integer. ActionsConfiguration \u00b6 Key Type Required Default Description GET GetActionConfiguration No None Action configuration for GET requests on target PUT PutActionConfiguration No None Action configuration for PUT requests on target DELETE DeleteActionConfiguration No None Action configuration for DELETE requests on target GetActionConfiguration \u00b6 Key Type Required Default Description enabled Boolean No false Will allow GET requests config GetActionConfigConfiguration No None Configuration for GET requests GetActionConfigConfiguration \u00b6 Key Type Required Default Description redirectWithTrailingSlashForNotFoundFile Boolean No false This option allow to do a redirect with a trailing slash when a GET request on a file (not a folder) encountered a 404 not found. indexDocument String No \"\" The index document name. If this document is found, get it instead of list folder. Example: index.html streamedFileHeaders Map[String]String No nil Headers containing templates that will be added to streamed files in this target. Key corresponds to header and value to the template. If templated value is empty, the header won't be added to answer. More information here . webhooks [ WebhookConfiguration ] No nil Webhooks configuration list to call when a GET request is performed PutActionConfiguration \u00b6 Key Type Required Default Description enabled Boolean No false Will allow PUT requests config PutActionConfigConfiguration No None Configuration for PUT requests PutActionConfigConfiguration \u00b6 Key Type Required Default Description metadata Map[String]String No None Metadata key/values that will be put on S3 objects. Map Values can be templated. Empty values will be flushed. See here storageClass String No \"\" Storage class that will be used for uploaded objects. See storage class here: https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html . Value can be templated. Empty values will be flushed. See here allowOverride Boolean No false Will allow override objects if enabled webhooks [ WebhookConfiguration ] No nil Webhooks configuration list to call when a PUT request is performed DeleteActionConfiguration \u00b6 Key Type Required Default Description enabled Boolean No false Will allow DELETE requests config DeleteActionConfigConfiguration No None Configuration for DELETE requests DeleteActionConfigConfiguration \u00b6 Key Type Required Default Description webhooks [ WebhookConfiguration ] No nil Webhooks configuration list to call when a DELETE request is performed WebhookConfiguration \u00b6 You can found more information here about webhooks and this works in the application. Key Type Required Default Description method String Yes None HTTP Method used for webhook call. Can be POST , PUT , DELETE or PATCH url String Yes None URL to be called headers Map[String]String No nil Fixed headers secretHeaders Map[String] credentialconfiguration No nil Headers coming from secrets (for credentials for example) retryCount Integer No 0 Number of retry in case of error defaultWaitTime String No \"\" Default wait time to sleep before retrying request. Default is 100 ms (injected by HTTP client) maxWaitTime String No \"\" Max wait time to sleep before retrying request. Default is 2 seconds (injected by HTTP client) BucketConfiguration \u00b6 Key Type Required Default Description name String Yes None Bucket name in S3 provider prefix String No None Bucket prefix region String No us-east-1 Bucket region s3Endpoint String No None Custom S3 Endpoint for non AWS S3 bucket credentials BucketCredentialConfiguration No None Credentials to access S3 bucket disableSSL Boolean No false Disable SSL connection s3ListMaxKeys Integer No 1000 This flag will be used for the max pagination list management of files and \"folders\" in S3. In S3 list requests, the limit is fixed to 1000 items maximum. S3-Proxy will allow to increase this by making multiple requests to S3. Warning: This will increase the memory and CPU usage. BucketCredentialConfiguration \u00b6 Key Type Required Default Description accessKey CredentialConfiguration No None S3 Access Key ID secretKey CredentialConfiguration No None S3 Secret Access Key CredentialConfiguration \u00b6 Key Type Required Default Description path String Only if env and value are not set None File path contains credential in (Values loaded will be cleaned from new lines) env String Only if path and value are not set None Environment variable name to use to load credential value String Only if path and env are not set None Credential value directly (Not recommended) AuthProvidersConfiguration \u00b6 Key Type Required Default Description basic map[string]BasicAuthConfiguration No None Basic Auth configuration and key as provider name oidc map[string]OIDCAuthConfiguration No None OIDC Auth configuration and key as provider name header map[string]HeaderAuthConfiguration No None Header Auth configuration and key as provider name HeaderAuthConfiguration \u00b6 This authentication method should be used only with a software like Oauth2-proxy or an authentication gateway that put headers with user information inside. Warning S3-proxy won't validate headers value or anything else. It will take values as they are coming. Key Type Required Default Description usernameHeader String Yes None Username header emailHeader String Yes None Email header groupsHeader [String] No \"\" Groups header. Note: Value must be a list of groups separated by comas ( , ) OIDCAuthConfiguration \u00b6 Key Type Required Default Description clientID String Yes None Client ID clientSecret CredentialConfiguration No None Client Secret issuerUrl String Yes None Issuer URL (example: https://fake.com/realm/fake-realm redirectUrl String No \"\" Redirect URL (this is the service url). Without this being set, the redirect url will be calculated from input host automatically by S3-Proxy scopes [String] No [\"openid\", \"profile\", \"email\"] Scopes state String Yes None Random string to have a secure connection with oidc provider groupClaim String No groups Groups claim path in token ( groups must be a list of strings containing user groups) emailVerified Boolean No false Check that user email is verified in user token (field email_verified ) cookieName String No oidc Cookie generated name cookieSecure Boolean No false Is the cookie generated secure ? cookieDomains [String] No nil Cookie domains affected to generated cookie. If request host is matching one of the cookie domains defined, generated cookie will use the matching domain, otherwise, the domain will be the request host. loginPath String No \"\" Override login path for authentication. If not defined, /auth/PROVIDER_NAME will be used callbackPath String No \"\" Override callback path for authentication callback. If not defined, /auth/PROVIDER_NAME/callback will be used BasicAuthConfiguration \u00b6 Key Type Required Default Description realm String Yes None Basic Auth Realm Resource \u00b6 Key Type Required Default Description path String Yes None Path or matching path (e.g.: /* ) methods [String] No [GET] HTTP methods allowed (Allowed values GET , PUT , DELETE ) whiteList Boolean Required without oidc or basic None Is this path in white list ? E.g.: No authentication basic ResourceBasic Required without whitelist, oidc or header None Basic auth configuration oidc ResourceHeaderOIDC Required without whitelist, basic or header None OIDC configuration authorization header ResourceHeaderOIDC Required without whitelist, oidc or basic None Header configuration authorization ResourceHeaderOIDC \u00b6 Key Type Required Default Description authorizationAccesses [HeaderOIDCAuthorizationAccesses] No None Authorization accesses matrix by group or email. If not set, authenticated users will be authorized (no group or email validation will be performed if authorizationOPAServer isn't set). This is based on the \"OR\" principle. Another way to say it is: you are authorized as soon as 1 thing (email or group) is matching. Check the guide here for more details. authorizationOPAServer OPAServerAuthorization No None Authorization through an OPA (Open Policy Agent) server OPAServerAuthorization \u00b6 Key Type Required Default Description url String Yes None URL of the OPA server including the data path (see the dedicated section for OPA ) tags Map[String]String No {} Data that will be added as tags in the OPA input data (see the dedicated section for OPA ) HeaderOIDCAuthorizationAccesses \u00b6 Key Type Required Default Description group String Required without email None Group name email String Required without group None Email regexp Boolean No false Consider group or email as regexp for matching ResourceBasic \u00b6 Key Type Required Default Description credentials [BasicAuthUserConfiguration] Yes None List of authorized user and password BasicAuthUserConfiguration \u00b6 Key Type Required Default Description user String Yes None User name password CredentialConfiguration Yes None User password MountConfiguration \u00b6 Key Type Required Default Description host String No \"\" Host domain requested (eg: localhost:888 or google.fr). Put empty for all domains. Note: Glob patterns for host domains are supported. path [String] Yes None A path list for mounting point ListTargetsConfiguration \u00b6 Key Type Required Default Description enabled Boolean Yes None To enable the list targets feature mount MountConfiguration Yes None Mount point configuration resource Resource No None Resources declaration for path whitelist or specific authentication on path","title":"Structure"},{"location":"configuration/structure/#structure","text":"The configuration must be set in multiple YAML files located in conf/ folder from the current working directory. You can create multiple files containing different part of the configuration. A global merge will be done across all data in all files. Moreover, the configuration files will be watched for modifications. You can see a full example in the Example section","title":"Structure"},{"location":"configuration/structure/#main-structure","text":"Key Type Required Default Description log LogConfiguration No None Log configurations server ServerConfiguration No None Server configurations internalServer ServerConfiguration No None Internal Server configurations template TemplateConfiguration No None Template configurations targets Map[String] targetconfiguration No None Targets configuration. Map key will be considered as the target name. (This will used in urls and list of targets.) authProviders AuthProvidersConfiguration No None Authentication providers configuration listTargets ListTargetsConfiguration No None List targets feature configuration","title":"Main structure"},{"location":"configuration/structure/#logconfiguration","text":"Key Type Required Default Description level String No info Log level format String No json Log format (available values are: json or text ) filePath String No \"\" Log file path","title":"LogConfiguration"},{"location":"configuration/structure/#serverconfiguration","text":"Key Type Required Default Description listenAddr String No \"\" Listen Address (Important: Cannot be hot reloaded) port Integer No 8080 Listening Port (Important: Cannot be hot reloaded) cors ServerCorsConfig No None CORS configuration cache ServerCacheConfig No None Cache configuration ssl ServerSSLConfig No None SSL/TLS configuration (Important: Cannot be hot reloaded)","title":"ServerConfiguration"},{"location":"configuration/structure/#servertimeoutsconfig","text":"Key Type Required Default Description readTimeout string No \"\" Server read timeout readHeaderTimeout string No \"60s\" (to avoid Slowloris attack) Server read header timeout writeTimeout string No \"\" Server write timeout idleTimeout string No \"\" Server idle timeout","title":"ServerTimeoutsConfig"},{"location":"configuration/structure/#servercompressconfig","text":"Key Type Required Default Description enabled Boolean No true Is the compression enabled ? level Integer No 5 The level of GZip compression types [String] No [\"text/html\",\"text/css\",\"text/plain\",\"text/javascript\",\"application/javascript\",\"application/x-javascript\",\"application/json\",\"application/atom+xml\",\"application/rss+xml\",\"image/svg+xml\"] The content type list compressed in output","title":"ServerCompressConfig"},{"location":"configuration/structure/#servercacheconfig","text":"Key Type Required Default Description noCacheEnabled Boolean false false Force no cache headers on all responses expires String false \"\" Expires header value cacheControl String false \"\" Cache-Control header value pragma String false \"\" Pragma header value xAccelExpires String false \"\" X-Accel-Expires header value See more information here .","title":"ServerCacheConfig"},{"location":"configuration/structure/#servercorsconfig","text":"This feature is powered by go-chi/cors . You can read more documentation about all field there. Key Type Required Default Description enabled Boolean No false Is CORS support enabled ? allowAll Boolean No false Allow all CORS requests with all origins, all HTTP methods, etc ? allowOrigins [String] No Allow origins array. Example: https://fake.com . This support stars in origins. allowMethods [String] No Allow HTTP Methods allowHeaders [String] No Allow headers exposeHeaders [String] No Expose headers maxAge Integer No Max age. 300 is the maximum value not ignored by any of major browsers. allowCredentials Boolean No Allow credentials debug Boolean No Debug mode for go-chi/cors optionsPassthrough Boolean No OPTIONS method Passthrough","title":"ServerCorsConfig"},{"location":"configuration/structure/#serversslcertificate","text":"Key Type Required Default Description certificate String Yes[1] None The PEM encoded certificate. certificateUrl String Yes[1] None The URL of a resource containing the certificate. certificateUrlConfig SSLURLConfig No None Additional URL configuration if certificateUrl is an S3 URL. privateKey String Yes[2] None The PEM encoded private key. privateKeyUrl String Yes[2] None The URL of a resource containing the private key. privateKeyUrlConfig SSLURLConfig No None Additional URL configuration if privateKeyUrl is an S3 URL. Notes: [1] Exactly one of certificate or certificateUrl must be specified. [2] Exactly one of privateKey or privateKeyUrl must be specified. Allowed URL types are: Local files, in file:/// absolute / path / filename , file:// relative / path / filename , / absolute / path / filename , or relative / path / filename form. HTTP/HTTPS URLs in https:// host [: port ]/ path form. AWS S3 URLs in either s3:// bucket / key or arn: partition :s3::: bucket / key form. AWS Secrets Manager ARNs in arn: partition :secretsmanager: region : account-id :secret/ secret-name form. AWS Systems Manager parameter ARNs in arn: partition :ssm: region : account-id :parameter/ path / name form.","title":"ServerSSLCertificate"},{"location":"configuration/structure/#serversslconfig","text":"Key Type Required Default Description enabled Boolean No false Whether SSL support should be enabled. certificates [ ServerSSLCertificate ] No [] Certificates to serve when connected. selfSignedHostnames [String] No [] List of hostnames to generate self-signed certificates for. minTLSVersion String No \"TLSv1.2\" The minimum TLS version to allow when a client connects. maxTLSVersion String No None The maximum TLS version to allow when a client connects. cipherSuites [String] No See below The TLS ciphers to enable. The values for cipherSuites are the constant names in the Go crypto/tls package, starting with TLS_ . The default ciphers are the recommended cipher suites from ciphersuite.info supported by Go: TLS_AES_128_GCM_SHA256 TLS_AES_256_GCM_SHA384 TLS_CHACHA20_POLY1305_SHA256 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256","title":"ServerSSLConfig"},{"location":"configuration/structure/#sslurlconfig","text":"This is a subset/modification of the configuration available from BucketConfiguration . Key Type Required Default Description httpTimeout String (duration) No None Timeout for HTTP connections (including AWS calls) to get SSL certificate/keys. awsRegion String No us-east-1 AWS region for S3/SSM/Secrets Manager-stored documents. awsEndpoint String No None Custom endpoint for S3/SSM/Secrets Manager API calls. awsCredentials BucketCredentialConfiguration No None Credentials to access AWS-based documents awsDisableSSL Boolean No false Disable SSL for AWS API calls. This does not affect https URLs.","title":"SSLURLConfig"},{"location":"configuration/structure/#templateconfiguration","text":"Warning Override headers will remove the default value containing the Content-Type header. Why ? Because it was though that it was better to know why it is override and not have magical values coming from nowhere. Key Type Required Default Description helpers [String] No [templates/_helpers.tpl] Template Golang helpers targetList TemplateConfigurationItem No targetList: { path: \"templates/target-list.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"200\" } Target list template configuration. More information here . folderList TemplateConfigurationItem No folderList: { path: \"templates/folder-list.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"200\" } Folder list template configuration. More information here . notFoundError TemplateConfigurationItem No notFoundError: { path: \"templates/not-found-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"404\" } Not found template configuration. More information here . unauthorizedError TemplateConfigurationItem No unauthorizedError: { path: \"templates/unauthorized-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"401\" } Unauthorized template configuration. More information here . forbiddenError TemplateConfigurationItem No forbiddenError: { path: \"templates/forbidden-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"403\" } Forbidden template configuration. More information here . badRequestError TemplateConfigurationItem No badRequestError: { path: \"templates/bad-request-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"400\" } Bad Request template configuration. More information here . internalServerError TemplateConfigurationItem No internalServerError: { path: \"templates/internal-server-error.tpl\", headers: { \"Content-Type\": \"{{ template \\\"main.headers.contentType\\\" . }}\" }, status: \"500\" } Internal server error template configuration. More information here . put TemplateConfigurationItem No put: { path: \"templates/put.tpl\", headers: {}, status: \"204\" } PUT response template configuration. More information here . delete TemplateConfigurationItem No delete: { path: \"templates/put.tpl\", headers: {}, status: \"204\" } DELETE response template configuration. More information here .","title":"TemplateConfiguration"},{"location":"configuration/structure/#templateconfigurationitem","text":"Key Type Required Default Description path String True \"\" File path to template file headers Map[String]String False None Headers containing templates. Key corresponds to header and value to the template. If templated value is empty, the header won't be added to answer. More information here . status String False \"\" Status code template. It will be parsed to get an integer.","title":"TemplateConfigurationItem"},{"location":"configuration/structure/#targetconfiguration","text":"Key Type Required Default Description bucket BucketConfiguration Yes None Bucket configuration resources [Resource] No None Resources declaration for path whitelist or specific authentication on path list. WARNING: Think about all path that you want to protect. At the end of the list, you should add a resource filter for /* otherwise, it will be public. mount MountConfiguration Yes None Mount point configuration actions ActionsConfiguration No GET action enabled Actions allowed on target (GET, PUT or DELETE) keyRewriteList [KeyRewrite] No None Key rewrite list is here to allow rewriting keys before sending request to S3 (See more information here ) templates TargetTemplateConfig No None Custom target templates from files on local filesystem or in bucket","title":"TargetConfiguration"},{"location":"configuration/structure/#keyrewrite","text":"See more information here . Key Type Required Default Description source String Required None Source regexp matcher with golang group naming support. targetType String No REGEX Possible values are REGEX or TEMPLATE . target String Required None Target template for new key send to S3.","title":"KeyRewrite"},{"location":"configuration/structure/#targettemplateconfig","text":"Key Type Required Default Description helpers [ TargetHelperConfigItem ] No None Helpers list custom template declarations. folderList TargetTemplateConfigItem No None Folder list custom template declaration. More information here . notFoundError TargetTemplateConfigItem No None Not Found custom template declaration. More information here . internalServerError TargetTemplateConfigItem No None Internal server error custom template declaration. More information here . forbiddenError TargetTemplateConfigItem No None Forbidden custom template declaration. More information here . unauthorizedError TargetTemplateConfigItem No None Unauthorized custom template declaration. More information here . badRequestError TargetTemplateConfigItem No None Bad Request custom template declaration. More information here . put TargetTemplateConfigItem No None PUT custom template declaration. More information here . delete TargetTemplateConfigItem No None DELETE custom template declaration. More information here .","title":"TargetTemplateConfig"},{"location":"configuration/structure/#targethelperconfigitem","text":"Key Type Required Default Description inBucket Boolean No false Is the file in bucket or on local file system ? path String Yes None Path for template file","title":"TargetHelperConfigItem"},{"location":"configuration/structure/#targettemplateconfigitem","text":"Key Type Required Default Description inBucket Boolean No false Is the file in bucket or on local file system ? path String Yes None Path for template file headers Map[String]String False This will be set to corresponding TemplateConfiguration if empty. Headers containing templates. Key corresponds to header and value to the template. If templated value is empty, the header won't be added to answer. More information here . status String Yes None Status code template. It will be parsed to get an integer.","title":"TargetTemplateConfigItem"},{"location":"configuration/structure/#actionsconfiguration","text":"Key Type Required Default Description GET GetActionConfiguration No None Action configuration for GET requests on target PUT PutActionConfiguration No None Action configuration for PUT requests on target DELETE DeleteActionConfiguration No None Action configuration for DELETE requests on target","title":"ActionsConfiguration"},{"location":"configuration/structure/#getactionconfiguration","text":"Key Type Required Default Description enabled Boolean No false Will allow GET requests config GetActionConfigConfiguration No None Configuration for GET requests","title":"GetActionConfiguration"},{"location":"configuration/structure/#getactionconfigconfiguration","text":"Key Type Required Default Description redirectWithTrailingSlashForNotFoundFile Boolean No false This option allow to do a redirect with a trailing slash when a GET request on a file (not a folder) encountered a 404 not found. indexDocument String No \"\" The index document name. If this document is found, get it instead of list folder. Example: index.html streamedFileHeaders Map[String]String No nil Headers containing templates that will be added to streamed files in this target. Key corresponds to header and value to the template. If templated value is empty, the header won't be added to answer. More information here . webhooks [ WebhookConfiguration ] No nil Webhooks configuration list to call when a GET request is performed","title":"GetActionConfigConfiguration"},{"location":"configuration/structure/#putactionconfiguration","text":"Key Type Required Default Description enabled Boolean No false Will allow PUT requests config PutActionConfigConfiguration No None Configuration for PUT requests","title":"PutActionConfiguration"},{"location":"configuration/structure/#putactionconfigconfiguration","text":"Key Type Required Default Description metadata Map[String]String No None Metadata key/values that will be put on S3 objects. Map Values can be templated. Empty values will be flushed. See here storageClass String No \"\" Storage class that will be used for uploaded objects. See storage class here: https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html . Value can be templated. Empty values will be flushed. See here allowOverride Boolean No false Will allow override objects if enabled webhooks [ WebhookConfiguration ] No nil Webhooks configuration list to call when a PUT request is performed","title":"PutActionConfigConfiguration"},{"location":"configuration/structure/#deleteactionconfiguration","text":"Key Type Required Default Description enabled Boolean No false Will allow DELETE requests config DeleteActionConfigConfiguration No None Configuration for DELETE requests","title":"DeleteActionConfiguration"},{"location":"configuration/structure/#deleteactionconfigconfiguration","text":"Key Type Required Default Description webhooks [ WebhookConfiguration ] No nil Webhooks configuration list to call when a DELETE request is performed","title":"DeleteActionConfigConfiguration"},{"location":"configuration/structure/#webhookconfiguration","text":"You can found more information here about webhooks and this works in the application. Key Type Required Default Description method String Yes None HTTP Method used for webhook call. Can be POST , PUT , DELETE or PATCH url String Yes None URL to be called headers Map[String]String No nil Fixed headers secretHeaders Map[String] credentialconfiguration No nil Headers coming from secrets (for credentials for example) retryCount Integer No 0 Number of retry in case of error defaultWaitTime String No \"\" Default wait time to sleep before retrying request. Default is 100 ms (injected by HTTP client) maxWaitTime String No \"\" Max wait time to sleep before retrying request. Default is 2 seconds (injected by HTTP client)","title":"WebhookConfiguration"},{"location":"configuration/structure/#bucketconfiguration","text":"Key Type Required Default Description name String Yes None Bucket name in S3 provider prefix String No None Bucket prefix region String No us-east-1 Bucket region s3Endpoint String No None Custom S3 Endpoint for non AWS S3 bucket credentials BucketCredentialConfiguration No None Credentials to access S3 bucket disableSSL Boolean No false Disable SSL connection s3ListMaxKeys Integer No 1000 This flag will be used for the max pagination list management of files and \"folders\" in S3. In S3 list requests, the limit is fixed to 1000 items maximum. S3-Proxy will allow to increase this by making multiple requests to S3. Warning: This will increase the memory and CPU usage.","title":"BucketConfiguration"},{"location":"configuration/structure/#bucketcredentialconfiguration","text":"Key Type Required Default Description accessKey CredentialConfiguration No None S3 Access Key ID secretKey CredentialConfiguration No None S3 Secret Access Key","title":"BucketCredentialConfiguration"},{"location":"configuration/structure/#credentialconfiguration","text":"Key Type Required Default Description path String Only if env and value are not set None File path contains credential in (Values loaded will be cleaned from new lines) env String Only if path and value are not set None Environment variable name to use to load credential value String Only if path and env are not set None Credential value directly (Not recommended)","title":"CredentialConfiguration"},{"location":"configuration/structure/#authprovidersconfiguration","text":"Key Type Required Default Description basic map[string]BasicAuthConfiguration No None Basic Auth configuration and key as provider name oidc map[string]OIDCAuthConfiguration No None OIDC Auth configuration and key as provider name header map[string]HeaderAuthConfiguration No None Header Auth configuration and key as provider name","title":"AuthProvidersConfiguration"},{"location":"configuration/structure/#headerauthconfiguration","text":"This authentication method should be used only with a software like Oauth2-proxy or an authentication gateway that put headers with user information inside. Warning S3-proxy won't validate headers value or anything else. It will take values as they are coming. Key Type Required Default Description usernameHeader String Yes None Username header emailHeader String Yes None Email header groupsHeader [String] No \"\" Groups header. Note: Value must be a list of groups separated by comas ( , )","title":"HeaderAuthConfiguration"},{"location":"configuration/structure/#oidcauthconfiguration","text":"Key Type Required Default Description clientID String Yes None Client ID clientSecret CredentialConfiguration No None Client Secret issuerUrl String Yes None Issuer URL (example: https://fake.com/realm/fake-realm redirectUrl String No \"\" Redirect URL (this is the service url). Without this being set, the redirect url will be calculated from input host automatically by S3-Proxy scopes [String] No [\"openid\", \"profile\", \"email\"] Scopes state String Yes None Random string to have a secure connection with oidc provider groupClaim String No groups Groups claim path in token ( groups must be a list of strings containing user groups) emailVerified Boolean No false Check that user email is verified in user token (field email_verified ) cookieName String No oidc Cookie generated name cookieSecure Boolean No false Is the cookie generated secure ? cookieDomains [String] No nil Cookie domains affected to generated cookie. If request host is matching one of the cookie domains defined, generated cookie will use the matching domain, otherwise, the domain will be the request host. loginPath String No \"\" Override login path for authentication. If not defined, /auth/PROVIDER_NAME will be used callbackPath String No \"\" Override callback path for authentication callback. If not defined, /auth/PROVIDER_NAME/callback will be used","title":"OIDCAuthConfiguration"},{"location":"configuration/structure/#basicauthconfiguration","text":"Key Type Required Default Description realm String Yes None Basic Auth Realm","title":"BasicAuthConfiguration"},{"location":"configuration/structure/#resource","text":"Key Type Required Default Description path String Yes None Path or matching path (e.g.: /* ) methods [String] No [GET] HTTP methods allowed (Allowed values GET , PUT , DELETE ) whiteList Boolean Required without oidc or basic None Is this path in white list ? E.g.: No authentication basic ResourceBasic Required without whitelist, oidc or header None Basic auth configuration oidc ResourceHeaderOIDC Required without whitelist, basic or header None OIDC configuration authorization header ResourceHeaderOIDC Required without whitelist, oidc or basic None Header configuration authorization","title":"Resource"},{"location":"configuration/structure/#resourceheaderoidc","text":"Key Type Required Default Description authorizationAccesses [HeaderOIDCAuthorizationAccesses] No None Authorization accesses matrix by group or email. If not set, authenticated users will be authorized (no group or email validation will be performed if authorizationOPAServer isn't set). This is based on the \"OR\" principle. Another way to say it is: you are authorized as soon as 1 thing (email or group) is matching. Check the guide here for more details. authorizationOPAServer OPAServerAuthorization No None Authorization through an OPA (Open Policy Agent) server","title":"ResourceHeaderOIDC"},{"location":"configuration/structure/#opaserverauthorization","text":"Key Type Required Default Description url String Yes None URL of the OPA server including the data path (see the dedicated section for OPA ) tags Map[String]String No {} Data that will be added as tags in the OPA input data (see the dedicated section for OPA )","title":"OPAServerAuthorization"},{"location":"configuration/structure/#headeroidcauthorizationaccesses","text":"Key Type Required Default Description group String Required without email None Group name email String Required without group None Email regexp Boolean No false Consider group or email as regexp for matching","title":"HeaderOIDCAuthorizationAccesses"},{"location":"configuration/structure/#resourcebasic","text":"Key Type Required Default Description credentials [BasicAuthUserConfiguration] Yes None List of authorized user and password","title":"ResourceBasic"},{"location":"configuration/structure/#basicauthuserconfiguration","text":"Key Type Required Default Description user String Yes None User name password CredentialConfiguration Yes None User password","title":"BasicAuthUserConfiguration"},{"location":"configuration/structure/#mountconfiguration","text":"Key Type Required Default Description host String No \"\" Host domain requested (eg: localhost:888 or google.fr). Put empty for all domains. Note: Glob patterns for host domains are supported. path [String] Yes None A path list for mounting point","title":"MountConfiguration"},{"location":"configuration/structure/#listtargetsconfiguration","text":"Key Type Required Default Description enabled Boolean Yes None To enable the list targets feature mount MountConfiguration Yes None Mount point configuration resource Resource No None Resources declaration for path whitelist or specific authentication on path","title":"ListTargetsConfiguration"},{"location":"feature-guide/api/","text":"API \u00b6 GET \u00b6 This kind of requests will allow to get files or to perform a directory listing. There is 2 different management cases: If path ends with a slash, the backend will consider this as a directory and will perform a directory listing or will display index document. Example: GET /dir1/ If path doesn't end with a slash, the backend will consider this as a file request. Example: GET /file.pdf PUT \u00b6 This kind of requests will allow to send file in directory (so to upload a file in S3). The PUT request path must be a directory and must be a multipart form with a key named file with a file inside. Example: PUT --form file:@file.pdf /dir1/ DELETE \u00b6 This kind of requests will allow to delete files ( only ). Folder removal is forbidden at this moment. The DELETE request path must contain the file name. Example: DELETE /dir1/dir2/file.pdf .","title":"API"},{"location":"feature-guide/api/#api","text":"","title":"API"},{"location":"feature-guide/api/#get","text":"This kind of requests will allow to get files or to perform a directory listing. There is 2 different management cases: If path ends with a slash, the backend will consider this as a directory and will perform a directory listing or will display index document. Example: GET /dir1/ If path doesn't end with a slash, the backend will consider this as a file request. Example: GET /file.pdf","title":"GET"},{"location":"feature-guide/api/#put","text":"This kind of requests will allow to send file in directory (so to upload a file in S3). The PUT request path must be a directory and must be a multipart form with a key named file with a file inside. Example: PUT --form file:@file.pdf /dir1/","title":"PUT"},{"location":"feature-guide/api/#delete","text":"This kind of requests will allow to delete files ( only ). Folder removal is forbidden at this moment. The DELETE request path must contain the file name. Example: DELETE /dir1/dir2/file.pdf .","title":"DELETE"},{"location":"feature-guide/authorization-accesses/","text":"Authorization accesses: How it works ? \u00b6 The authorization accesses list coming from ResourceHeaderOIDC are accesses matrix by group or email. If not set, authenticated users will be authorized (no group or email validation will be performed if authorizationOPAServer isn't set). Moreover, this is based on the \"OR\" principle. Another way to say it is: you are authorized as soon as 1 thing (email or group) is matching. The example below explain this in detail. Example of authorization accesses configuration: targets : target1 : resources : - path : /* provider : provider1 oidc : authorizationAccesses : - group : group1 - group : group2 bucket : ... We consider those users: Jean Dupont with group1 and group2 Ast\u00e9rix with group1 and group3 Ob\u00e9lix with group3 Accesses will be: Jean Dupont: Ok because he is in group1 (and group2 but this one isn't matching the first) Ast\u00e9rix: Ok because he is in group1 Ob\u00e9lix: Forbidden because he isn't in any of group1 or group2 To conclude, if you want to have a AND accesses list (following the example before, only Jean Dupont is authorized), you will have to change the authorization mechanism to OPAServerAuthorization and check feature guide here .","title":"Authorization accesses: How it works ?"},{"location":"feature-guide/authorization-accesses/#authorization-accesses-how-it-works","text":"The authorization accesses list coming from ResourceHeaderOIDC are accesses matrix by group or email. If not set, authenticated users will be authorized (no group or email validation will be performed if authorizationOPAServer isn't set). Moreover, this is based on the \"OR\" principle. Another way to say it is: you are authorized as soon as 1 thing (email or group) is matching. The example below explain this in detail. Example of authorization accesses configuration: targets : target1 : resources : - path : /* provider : provider1 oidc : authorizationAccesses : - group : group1 - group : group2 bucket : ... We consider those users: Jean Dupont with group1 and group2 Ast\u00e9rix with group1 and group3 Ob\u00e9lix with group3 Accesses will be: Jean Dupont: Ok because he is in group1 (and group2 but this one isn't matching the first) Ast\u00e9rix: Ok because he is in group1 Ob\u00e9lix: Forbidden because he isn't in any of group1 or group2 To conclude, if you want to have a AND accesses list (following the example before, only Jean Dupont is authorized), you will have to change the authorization mechanism to OPAServerAuthorization and check feature guide here .","title":"Authorization accesses: How it works ?"},{"location":"feature-guide/cache-control/","text":"Cache headers control \u00b6 The server allow to control the cache headers at the server level or directly on a template file response or on streamed files. The following options are presented below. No Cache \u00b6 Warning This will override all headers applied on a template or a streamed file. This configuration by default enabled for all responses including templates and streamed files. This is enabled by default for security reasons and to force no cache on everything. Here is an example to enforce this default value: 1 2 3 4 5 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : true Global cache control \u00b6 Warning This will override all headers applied on a template or a streamed file. This will allow to manage all cache headers values for all responses including templates and streamed files. 1 2 3 4 5 6 7 8 9 10 11 12 13 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : false # Expires header value expires : # Cache-control header value cacheControl : # Pragma header value pragma : # X-Accel-Expires header value xAccelExpires : Global ETag support \u00b6 Warning This will override all headers applied on a template or a streamed file. This configuration will be applied to all responses, for all requests. Here is an example of configuration to allow ETag support globally: 1 2 3 4 5 6 7 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : false # Cache-control header value cacheControl : must-revalidate, max-age=0 ETag specific template file header \u00b6 You can override the headers on a specific template to add Cache-Control and others on it. The following example will show how to disable the \"no-cache\" feature and add a Cache-Control header that will allow the ETag support in browsers: 1 2 3 4 5 6 7 8 9 10 11 12 13 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : false # Template configurations templates : targetList : path : templates/target-list.tpl headers : Content-Type : '{{ template \"main.headers.contentType\" . }}' Cache-Control : must-revalidate, max-age=0 ETag specific stream file header \u00b6 You can override the headers on streamed files to add Cache-Control and others on them. The following example will show how to disable the \"no-cache\" feature and add a Cache-Control header that will allow the ETag support in browsers: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : false # Targets map targets : first-bucket : ## Actions actions : # Action for GET requests on target GET : # Will allow GET requests enabled : true # Configuration for GET requests config : # Allow to add headers to streamed files (can be templated) streamedFileHeaders : Cache-Control : must-revalidate, max-age=0","title":"Cache headers control"},{"location":"feature-guide/cache-control/#cache-headers-control","text":"The server allow to control the cache headers at the server level or directly on a template file response or on streamed files. The following options are presented below.","title":"Cache headers control"},{"location":"feature-guide/cache-control/#no-cache","text":"Warning This will override all headers applied on a template or a streamed file. This configuration by default enabled for all responses including templates and streamed files. This is enabled by default for security reasons and to force no cache on everything. Here is an example to enforce this default value: 1 2 3 4 5 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : true","title":"No Cache"},{"location":"feature-guide/cache-control/#global-cache-control","text":"Warning This will override all headers applied on a template or a streamed file. This will allow to manage all cache headers values for all responses including templates and streamed files. 1 2 3 4 5 6 7 8 9 10 11 12 13 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : false # Expires header value expires : # Cache-control header value cacheControl : # Pragma header value pragma : # X-Accel-Expires header value xAccelExpires :","title":"Global cache control"},{"location":"feature-guide/cache-control/#global-etag-support","text":"Warning This will override all headers applied on a template or a streamed file. This configuration will be applied to all responses, for all requests. Here is an example of configuration to allow ETag support globally: 1 2 3 4 5 6 7 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : false # Cache-control header value cacheControl : must-revalidate, max-age=0","title":"Global ETag support"},{"location":"feature-guide/cache-control/#etag-specific-template-file-header","text":"You can override the headers on a specific template to add Cache-Control and others on it. The following example will show how to disable the \"no-cache\" feature and add a Cache-Control header that will allow the ETag support in browsers: 1 2 3 4 5 6 7 8 9 10 11 12 13 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : false # Template configurations templates : targetList : path : templates/target-list.tpl headers : Content-Type : '{{ template \"main.headers.contentType\" . }}' Cache-Control : must-revalidate, max-age=0","title":"ETag specific template file header"},{"location":"feature-guide/cache-control/#etag-specific-stream-file-header","text":"You can override the headers on streamed files to add Cache-Control and others on them. The following example will show how to disable the \"no-cache\" feature and add a Cache-Control header that will allow the ETag support in browsers: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 server : # Cache configuration cache : # Force no cache headers on all responses noCacheEnabled : false # Targets map targets : first-bucket : ## Actions actions : # Action for GET requests on target GET : # Will allow GET requests enabled : true # Configuration for GET requests config : # Allow to add headers to streamed files (can be templated) streamedFileHeaders : Cache-Control : must-revalidate, max-age=0","title":"ETag specific stream file header"},{"location":"feature-guide/key-rewrite/","text":"Key Rewrite \u00b6 What is a \"key\" ? \u00b6 In S3, \"path\" are called \"key\". This means for S3-Proxy that when a client is calling with this type of request: GET /test/file.html , the S3 key will be /test/file.html (this example consider that S3 prefix and mount path are empty). General description \u00b6 The key rewrite feature is here to add the idea of url rewrite for S3 calls. The list is provided per target and don't skip the S3 prefix configured in the bucket section. Moreover, this list is tested over all actions (GET, PUT or DELETE) without any filter. This is done on purpose in order to be agnostic of client requests. This can be considered as similar as symlinks in Unix. How this is working ? \u00b6 The list of key rewrite is called over all incoming keys that will be sent to S3 (S3 prefix excluded). The first source regexp matching the key will select the target template that will be used. If nothing is matching, the incoming key will be untouched. There are some things that should be known about this feature: As the project is done with Golang, the regexp must be compatible with this language. The group namings are supported in source and can be used in target template. S3 Prefix declared in the bucket configuration won't be present in the source key. This is done on purpose because this is configuration that should be added to all keys before calling S3. The index document feature is called after the key rewrite feature. So the source key won't contains any indexDocument inside. The redirectWithTrailingSlashForNotFoundFile feature is also called after the key rewrite feature. For PUT and DELETE actions, the entire key is provided before calling the key rewrite feature. This means that the file name is included in the source key. This is done on purpose because DELETE and PUT actions are done on files, so it should be included in source key before calling the key rewrite feature. Sometimes, simple Regexp aren't enough. There is a possibility to use Golang templates for target templates and have access to data of incoming requests. For which situations ? \u00b6 This feature is done because it can happened that it is needed to rewrite keys before calling S3. This can happened when: An old application has been delivered and not updated that try to get a file on a specific URL and you moved this file to another location. Now, you can create a key rewrite in order to \"redirect\" the call to the new place. A website has been moved in the S3 storage and you want the old URL to continue to work for a given amount of time. And other examples... Examples \u00b6 Examples below will have a small configuration containing just the needed keys related to the example. Ignored key \u00b6 This example will show the ignore key behavior explained before. In this example, we will consider this request GET /file.html and the following configuration: 1 2 3 4 5 6 7 8 9 10 # ... targets : - name : test # ... keyRewriteList : - source : ^/my-super-complicated-path$ target : /redirected bucket : # ... prefix : \"\" The S3 key result of this request will be : /file.html . Simple key rewrite \u00b6 This example will show a simple key rewrite without any group name or capture. In this example, we will consider this request GET /file.html and the following configuration: 1 2 3 4 5 6 7 8 9 10 # ... targets : - name : test # ... keyRewriteList : - source : ^/file.html$ target : /redirected/file.html bucket : # ... prefix : \"\" The S3 key result of this request will be : /redirected/file.html . Golang naming groups \u00b6 This example will show a capture with name reused in template. In this example, we will consider this request GET /folder1/file.html and the following configuration: 1 2 3 4 5 6 7 8 9 10 # ... targets : - name : test # ... keyRewriteList : - source : ^/(?P<one>\\w+)/file.html$ target : /$one/fake/$one/file.html bucket : # ... prefix : \"\" The S3 key result of this request will be : /folder1/fake/folder1/file.html . S3 prefix \u00b6 This example will show a simple key rewrite with the S3 prefix data. In this example, we will consider this request GET /file.html and the following configuration: 1 2 3 4 5 6 7 8 9 10 # ... targets : - name : test # ... keyRewriteList : - source : ^/file.html$ target : /redirected/file.html bucket : # ... prefix : \"/folder1\" The S3 key result of this request will be : /folder1/redirected/file.html . Simple target as Golang template \u00b6 This example will show a simple key rewrite without any group name or capture. In this example, we will consider this request GET /file.html with a User connected with username myuser and the following configuration: 1 2 3 4 5 6 7 8 9 10 11 # ... targets : - name : test # ... keyRewriteList : - source : ^/file.html$ targetType : TEMPLATE target : \"/{{ .User.Username }}/redirected/file.html\" bucket : # ... prefix : \"\" The S3 key result of this request will be : /myuser/redirected/file.html . See in TargetKeyRewriteData available for templates. Advanced target as Golang template \u00b6 This example will show a simple key rewrite without any group name or capture. In this example, we will consider this request GET /input1/input2/file.html with a User connected with username myuser and the following configuration: 1 2 3 4 5 6 7 8 9 10 11 # ... targets : - name : test # ... keyRewriteList : - source : ^/input.*$ targetType : TEMPLATE target : \"{{ regexReplaceAll \" /input1(/.*)\" .Key (printf \"/input1/%s${1}\" .User.Username) }}\" bucket : # ... prefix : \"\" The S3 key result of this request will be : /input1/myuser/input2/file.html . See in TargetKeyRewriteData available for templates.","title":"Key Rewrite"},{"location":"feature-guide/key-rewrite/#key-rewrite","text":"","title":"Key Rewrite"},{"location":"feature-guide/key-rewrite/#what-is-a-key","text":"In S3, \"path\" are called \"key\". This means for S3-Proxy that when a client is calling with this type of request: GET /test/file.html , the S3 key will be /test/file.html (this example consider that S3 prefix and mount path are empty).","title":"What is a \"key\" ?"},{"location":"feature-guide/key-rewrite/#general-description","text":"The key rewrite feature is here to add the idea of url rewrite for S3 calls. The list is provided per target and don't skip the S3 prefix configured in the bucket section. Moreover, this list is tested over all actions (GET, PUT or DELETE) without any filter. This is done on purpose in order to be agnostic of client requests. This can be considered as similar as symlinks in Unix.","title":"General description"},{"location":"feature-guide/key-rewrite/#how-this-is-working","text":"The list of key rewrite is called over all incoming keys that will be sent to S3 (S3 prefix excluded). The first source regexp matching the key will select the target template that will be used. If nothing is matching, the incoming key will be untouched. There are some things that should be known about this feature: As the project is done with Golang, the regexp must be compatible with this language. The group namings are supported in source and can be used in target template. S3 Prefix declared in the bucket configuration won't be present in the source key. This is done on purpose because this is configuration that should be added to all keys before calling S3. The index document feature is called after the key rewrite feature. So the source key won't contains any indexDocument inside. The redirectWithTrailingSlashForNotFoundFile feature is also called after the key rewrite feature. For PUT and DELETE actions, the entire key is provided before calling the key rewrite feature. This means that the file name is included in the source key. This is done on purpose because DELETE and PUT actions are done on files, so it should be included in source key before calling the key rewrite feature. Sometimes, simple Regexp aren't enough. There is a possibility to use Golang templates for target templates and have access to data of incoming requests.","title":"How this is working ?"},{"location":"feature-guide/key-rewrite/#for-which-situations","text":"This feature is done because it can happened that it is needed to rewrite keys before calling S3. This can happened when: An old application has been delivered and not updated that try to get a file on a specific URL and you moved this file to another location. Now, you can create a key rewrite in order to \"redirect\" the call to the new place. A website has been moved in the S3 storage and you want the old URL to continue to work for a given amount of time. And other examples...","title":"For which situations ?"},{"location":"feature-guide/key-rewrite/#examples","text":"Examples below will have a small configuration containing just the needed keys related to the example.","title":"Examples"},{"location":"feature-guide/key-rewrite/#ignored-key","text":"This example will show the ignore key behavior explained before. In this example, we will consider this request GET /file.html and the following configuration: 1 2 3 4 5 6 7 8 9 10 # ... targets : - name : test # ... keyRewriteList : - source : ^/my-super-complicated-path$ target : /redirected bucket : # ... prefix : \"\" The S3 key result of this request will be : /file.html .","title":"Ignored key"},{"location":"feature-guide/key-rewrite/#simple-key-rewrite","text":"This example will show a simple key rewrite without any group name or capture. In this example, we will consider this request GET /file.html and the following configuration: 1 2 3 4 5 6 7 8 9 10 # ... targets : - name : test # ... keyRewriteList : - source : ^/file.html$ target : /redirected/file.html bucket : # ... prefix : \"\" The S3 key result of this request will be : /redirected/file.html .","title":"Simple key rewrite"},{"location":"feature-guide/key-rewrite/#golang-naming-groups","text":"This example will show a capture with name reused in template. In this example, we will consider this request GET /folder1/file.html and the following configuration: 1 2 3 4 5 6 7 8 9 10 # ... targets : - name : test # ... keyRewriteList : - source : ^/(?P<one>\\w+)/file.html$ target : /$one/fake/$one/file.html bucket : # ... prefix : \"\" The S3 key result of this request will be : /folder1/fake/folder1/file.html .","title":"Golang naming groups"},{"location":"feature-guide/key-rewrite/#s3-prefix","text":"This example will show a simple key rewrite with the S3 prefix data. In this example, we will consider this request GET /file.html and the following configuration: 1 2 3 4 5 6 7 8 9 10 # ... targets : - name : test # ... keyRewriteList : - source : ^/file.html$ target : /redirected/file.html bucket : # ... prefix : \"/folder1\" The S3 key result of this request will be : /folder1/redirected/file.html .","title":"S3 prefix"},{"location":"feature-guide/key-rewrite/#simple-target-as-golang-template","text":"This example will show a simple key rewrite without any group name or capture. In this example, we will consider this request GET /file.html with a User connected with username myuser and the following configuration: 1 2 3 4 5 6 7 8 9 10 11 # ... targets : - name : test # ... keyRewriteList : - source : ^/file.html$ targetType : TEMPLATE target : \"/{{ .User.Username }}/redirected/file.html\" bucket : # ... prefix : \"\" The S3 key result of this request will be : /myuser/redirected/file.html . See in TargetKeyRewriteData available for templates.","title":"Simple target as Golang template"},{"location":"feature-guide/key-rewrite/#advanced-target-as-golang-template","text":"This example will show a simple key rewrite without any group name or capture. In this example, we will consider this request GET /input1/input2/file.html with a User connected with username myuser and the following configuration: 1 2 3 4 5 6 7 8 9 10 11 # ... targets : - name : test # ... keyRewriteList : - source : ^/input.*$ targetType : TEMPLATE target : \"{{ regexReplaceAll \" /input1(/.*)\" .Key (printf \"/input1/%s${1}\" .User.Username) }}\" bucket : # ... prefix : \"\" The S3 key result of this request will be : /input1/myuser/input2/file.html . See in TargetKeyRewriteData available for templates.","title":"Advanced target as Golang template"},{"location":"feature-guide/opa/","text":"Open Policy Agent (OPA) \u00b6 S3-proxy integrate Open Policy Agent for authorization process after OpenID Connect or Header based logins. Integration \u00b6 This project integrate OPA with the REST API. You can see an example here . In the project configuration, you just have to put the link to the data endpoint with \"allowed rego\" path. Here is the example from the OPA website: http://localhost:8181/v1/data/example/authz/allow Input data \u00b6 The following section will present the input data that s3-proxy will send to the Open Policy Agent. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { \"input\" : { \"user\" : { \"preferred_username\" : \"user\" , \"name\" : \"Sample User\" , \"groups\" : [ \"group1\" ], \"given_name\" : \"Sample\" , \"family_name\" : \"User\" , \"email\" : \"sample-user@example.com\" , \"email_verified\" : true }, \"request\" : { \"method\" : \"GET\" , \"protocol\" : \"HTTP/1.1\" , \"headers\" : { \"accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" , \"accept-encoding\" : \"gzip, deflate, br\" , \"accept-language\" : \"fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7\" , \"cache-control\" : \"max-age=0\" , \"connection\" : \"keep-alive\" , \"cookie\" : \"oidc=TOKEN\" , \"sec-fetch-dest\" : \"document\" , \"sec-fetch-mode\" : \"navigate\" , \"sec-fetch-site\" : \"none\" , \"sec-fetch-user\" : \"?1\" , \"upgrade-insecure-requests\" : \"1\" , \"user-agent\" : \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36\" }, \"remoteAddr\" : \"[::1]:51092\" , \"scheme\" : \"http\" , \"host\" : \"localhost:8080\" , \"parsed_path\" : [ \"v2\" ], \"path\" : \"/v2/\" }, \"tags\" : { \"fake\" : \"tag\" } } } Output Data \u00b6 Here is an example of the expected output schema: 1 2 3 { \"result\" : true }","title":"Open Policy Agent (OPA)"},{"location":"feature-guide/opa/#open-policy-agent-opa","text":"S3-proxy integrate Open Policy Agent for authorization process after OpenID Connect or Header based logins.","title":"Open Policy Agent (OPA)"},{"location":"feature-guide/opa/#integration","text":"This project integrate OPA with the REST API. You can see an example here . In the project configuration, you just have to put the link to the data endpoint with \"allowed rego\" path. Here is the example from the OPA website: http://localhost:8181/v1/data/example/authz/allow","title":"Integration"},{"location":"feature-guide/opa/#input-data","text":"The following section will present the input data that s3-proxy will send to the Open Policy Agent. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { \"input\" : { \"user\" : { \"preferred_username\" : \"user\" , \"name\" : \"Sample User\" , \"groups\" : [ \"group1\" ], \"given_name\" : \"Sample\" , \"family_name\" : \"User\" , \"email\" : \"sample-user@example.com\" , \"email_verified\" : true }, \"request\" : { \"method\" : \"GET\" , \"protocol\" : \"HTTP/1.1\" , \"headers\" : { \"accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" , \"accept-encoding\" : \"gzip, deflate, br\" , \"accept-language\" : \"fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7\" , \"cache-control\" : \"max-age=0\" , \"connection\" : \"keep-alive\" , \"cookie\" : \"oidc=TOKEN\" , \"sec-fetch-dest\" : \"document\" , \"sec-fetch-mode\" : \"navigate\" , \"sec-fetch-site\" : \"none\" , \"sec-fetch-user\" : \"?1\" , \"upgrade-insecure-requests\" : \"1\" , \"user-agent\" : \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36\" }, \"remoteAddr\" : \"[::1]:51092\" , \"scheme\" : \"http\" , \"host\" : \"localhost:8080\" , \"parsed_path\" : [ \"v2\" ], \"path\" : \"/v2/\" }, \"tags\" : { \"fake\" : \"tag\" } } }","title":"Input data"},{"location":"feature-guide/opa/#output-data","text":"Here is an example of the expected output schema: 1 2 3 { \"result\" : true }","title":"Output Data"},{"location":"feature-guide/prometheus-metrics/","text":"Prometheus Metrics \u00b6 This section will describe the prometheus metrics that the application is serving. Here is also an example of Prometheus dashboard that you can import as JSON file: dashboard . This dashboard has been done and tested on Grafana 7.0. http_requests_total \u00b6 Type: Counter Prometheus data: http_requests_total Description: How many HTTP requests have been processed ? Fields: Field name Description server Which Server is handling the request ? Can be \"business\" or \"internal\". Internal is the server handling requests for metrics, health check. status_code Request status code method Request method host Hostname used for the request path Path used for the request http_request_duration_seconds \u00b6 Type: Summary Prometheus data: http_request_duration_seconds_sum http_request_duration_seconds_count Description: The HTTP request latencies in seconds. Fields: Field name Description server Which Server is handling the request ? Can be \"business\" or \"internal\". Internal is the server handling requests for metrics, health check. status_code Request status code method Request method host Hostname used for the request path Path used for the request http_request_size_bytes \u00b6 Type: Summary Prometheus data: http_request_size_bytes_sum http_request_size_bytes_count Description: The HTTP request sizes in bytes. Fields: Field name Description server Which Server is handling the request ? Can be \"business\" or \"internal\". Internal is the server handling requests for metrics, health check. status_code Request status code method Request method host Hostname used for the request path Path used for the request http_response_size_bytes \u00b6 Type: Summary Prometheus data: http_response_size_bytes_sum http_response_size_bytes_count Description: The HTTP response sizes in bytes. Fields: Field name Description server Which Server is handling the request ? Can be \"business\" or \"internal\". Internal is the server handling requests for metrics, health check. status_code Request status code method Request method host Hostname used for the request path Path used for the request up \u00b6 Type: Gauge Prometheus data: up Description: 1 = up (hardcoded) Field name Description component Component name (hardcoded with s3-proxy ) s3_operations_total \u00b6 Type: Counter Prometheus data: s3_operations_total Description: How many operations are generated to s3 in total ? Fields: Field name Description target_name Target name bucket_name Bucket name operation S3 operation authenticated_total \u00b6 Type: Counter Prometheus data: authenticated_total Description: How many users have been authenticated ? Fields: Field name Description provider_type Provider type ( oidc or basic-auth for example) provider_name Provider name authorized_total \u00b6 Type: Counter Prometheus data: authorized_total Description: How many users have been authorized ? Fields: Field name Description provider_type Provider type ( oidc-opa or basic-auth for example) succeed_webhooks_total \u00b6 Type: Counter Prometheus data: succeed_webhooks_total Description: How many webhooks have been succeed ? Fields: Field name Description target_name Target name containing the webhook definition action_name Webhook action triggered ( GET , PUT or DELETE ) failed_webhooks_total \u00b6 Type: Counter Prometheus data: failed_webhooks_total Description: How many webhooks have been failed ? Fields: Field name Description target_name Target name containing the webhook definition action_name Webhook action triggered ( GET , PUT or DELETE )","title":"Prometheus Metrics"},{"location":"feature-guide/prometheus-metrics/#prometheus-metrics","text":"This section will describe the prometheus metrics that the application is serving. Here is also an example of Prometheus dashboard that you can import as JSON file: dashboard . This dashboard has been done and tested on Grafana 7.0.","title":"Prometheus Metrics"},{"location":"feature-guide/prometheus-metrics/#http_requests_total","text":"Type: Counter Prometheus data: http_requests_total Description: How many HTTP requests have been processed ? Fields: Field name Description server Which Server is handling the request ? Can be \"business\" or \"internal\". Internal is the server handling requests for metrics, health check. status_code Request status code method Request method host Hostname used for the request path Path used for the request","title":"http_requests_total"},{"location":"feature-guide/prometheus-metrics/#http_request_duration_seconds","text":"Type: Summary Prometheus data: http_request_duration_seconds_sum http_request_duration_seconds_count Description: The HTTP request latencies in seconds. Fields: Field name Description server Which Server is handling the request ? Can be \"business\" or \"internal\". Internal is the server handling requests for metrics, health check. status_code Request status code method Request method host Hostname used for the request path Path used for the request","title":"http_request_duration_seconds"},{"location":"feature-guide/prometheus-metrics/#http_request_size_bytes","text":"Type: Summary Prometheus data: http_request_size_bytes_sum http_request_size_bytes_count Description: The HTTP request sizes in bytes. Fields: Field name Description server Which Server is handling the request ? Can be \"business\" or \"internal\". Internal is the server handling requests for metrics, health check. status_code Request status code method Request method host Hostname used for the request path Path used for the request","title":"http_request_size_bytes"},{"location":"feature-guide/prometheus-metrics/#http_response_size_bytes","text":"Type: Summary Prometheus data: http_response_size_bytes_sum http_response_size_bytes_count Description: The HTTP response sizes in bytes. Fields: Field name Description server Which Server is handling the request ? Can be \"business\" or \"internal\". Internal is the server handling requests for metrics, health check. status_code Request status code method Request method host Hostname used for the request path Path used for the request","title":"http_response_size_bytes"},{"location":"feature-guide/prometheus-metrics/#up","text":"Type: Gauge Prometheus data: up Description: 1 = up (hardcoded) Field name Description component Component name (hardcoded with s3-proxy )","title":"up"},{"location":"feature-guide/prometheus-metrics/#s3_operations_total","text":"Type: Counter Prometheus data: s3_operations_total Description: How many operations are generated to s3 in total ? Fields: Field name Description target_name Target name bucket_name Bucket name operation S3 operation","title":"s3_operations_total"},{"location":"feature-guide/prometheus-metrics/#authenticated_total","text":"Type: Counter Prometheus data: authenticated_total Description: How many users have been authenticated ? Fields: Field name Description provider_type Provider type ( oidc or basic-auth for example) provider_name Provider name","title":"authenticated_total"},{"location":"feature-guide/prometheus-metrics/#authorized_total","text":"Type: Counter Prometheus data: authorized_total Description: How many users have been authorized ? Fields: Field name Description provider_type Provider type ( oidc-opa or basic-auth for example)","title":"authorized_total"},{"location":"feature-guide/prometheus-metrics/#succeed_webhooks_total","text":"Type: Counter Prometheus data: succeed_webhooks_total Description: How many webhooks have been succeed ? Fields: Field name Description target_name Target name containing the webhook definition action_name Webhook action triggered ( GET , PUT or DELETE )","title":"succeed_webhooks_total"},{"location":"feature-guide/prometheus-metrics/#failed_webhooks_total","text":"Type: Counter Prometheus data: failed_webhooks_total Description: How many webhooks have been failed ? Fields: Field name Description target_name Target name containing the webhook definition action_name Webhook action triggered ( GET , PUT or DELETE )","title":"failed_webhooks_total"},{"location":"feature-guide/templates/","text":"Templates \u00b6 The template feature will allow to customize the response body, status code and headers given by the application for many responses. All templates managed by S3-Proxy are Golang templates. Managed responses \u00b6 S3-Proxy will manage HTML and JSON responses automatically by default. This switch is performed according to the Accept request header. If no Accept header in found in the request, the HTML output will be used by default. Default templates can be found here . Functions \u00b6 General functions \u00b6 In all these templates, all Masterminds/sprig functions are available. S3-Proxy specific functions \u00b6 In all these templates, S3-Proxy specific functions are available: humanSize with int input in order to transform bytes to human size requestURI with http.Request input in order to get the full request URI from incoming request requestScheme with http.Request input in order to get the scheme from incoming request requestHost with http.Request input in order to get the hostname from incoming request include with template name defined in helpers and context in order to execute a template with the ability to save result in a variable, use it pipelines, ... (Imported from Helm ). Example: {{ $var := include \"defined-name\" . }} toJson will allow to transform a string to a JSON compatible one toYaml will allow to transform a string to a YAML compatible one tpl is inspired from the Helm one. It allows to render a template in a template rendering session. The first parameter is the template and the second, variables to use in Helpers \u00b6 Different helpers are available by default: main.userIdentifier will return the user identifier from the incoming request only if user exists main.headers.contentType will return the content type header from the incoming request main.body.errorJsonBody will return the json content body for an error Templates data structure and usage \u00b6 Target List \u00b6 This template is used in order to list all target buckets declared in the configuration file. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Targets Map[String] target The target map as coming from the configuration Available for: Response body Response headers Response status code Folder List \u00b6 This template is used in order to list files and folders in a bucket \"folder\". Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Entries [ Entry ] Folder entries BucketName String Bucket name Name String Target name Available for: Response body Response headers Response status code Not found error \u00b6 This template is used for all Not found errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code Unauthorized error \u00b6 This template is used for all Unauthorized errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code Forbidden error \u00b6 This template is used for all Forbidden errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code Internal Server Error \u00b6 This template is used for all Internal server error errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code Bad Request error \u00b6 This template is used for all Bad Request errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code Put \u00b6 This template is used for all PUT response. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang PutData PutData Put Data Available for: Response body Response headers Response status code Delete \u00b6 This template is used for all DELETE response. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang DeleteData DeleteData Delete Data Available for: Response body Response headers Response status code Streamed file \u00b6 This case is a special case, used only when a file is streamed from S3. This will allow to add headers to streamed files with GET requests. The following table will show the data structure available for the header template rendering: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang StreamFile StreamFile Stream file object Available for: Response headers PUT Metadata and Storage class \u00b6 PUT Metadata \u00b6 This case will be used for all PUT metadata templates. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Input PutInput PutInput structure data Key String The final S3 key generated for upload request PUT Storage class \u00b6 This case will be used for all PUT storage class templates. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Input PutInput PutInput structure data Key String The final S3 key generated for upload request Common/Other structures \u00b6 GenericUser \u00b6 Generic user is a golang interface that will match all kind of users managed by application. These are the properties available: Name Type Description GetType String Get type of user (OIDC or BASIC) GetIdentifier String Get identifier (Username for basic auth user or Username or email for OIDC user) GetUsername String Get username GetName String Get name (only available for OIDC user) GetGroups [String] Get groups (only available for OIDC user) GetGivenName String Get given name (only available for OIDC user) GetFamilyName String Get family name (only available for OIDC user) GetEmail String Get email (only available for OIDC user) IsEmailVerified Boolean Is Email Verified ? (only available for OIDC user) Entry \u00b6 Name Type Description Type String Entry type (FOLDER or FILE) Name String Entry name ETag String ETag from bucket (file only) LastModified Time Last modified entry Size Integer Entry file (file only) Key String Full key from S3 response Path String Access path to entry from web StreamFile \u00b6 Name Type Description CacheControl String Cache control value from S3 Expires String Expires value from S3 ContentDisposition String Content disposition value from S3 ContentEncoding String Content encoding value from S3 ContentLanguage String Content language value from S3 ContentLength Integer Content length value from S3 ContentRange String Content range value from S3 ContentType String Content type value from S3 ETag String ETag value from S3 LastModified Time Last modified value from S3 Metadata Map[String]String Metadata value from S3 PutInput \u00b6 Name Type Description RequestPath String Request path Filename String Filename used for upload ContentType String File content type for upload ContentSize Integer File content size for upload PutData \u00b6 Name Type Description Key String Full key from S3 response Filename String Filename used for upload ContentType String File content type for upload ContentSize Integer File content size for upload Metadata Map[String]String Metadata value from S3 StorageClass String Storage class DeleteData \u00b6 Name Type Description Key String Full key from S3 response TargetKeyRewriteData \u00b6 Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Target Target The current target configuration Key String Full key from S3 response","title":"Templates"},{"location":"feature-guide/templates/#templates","text":"The template feature will allow to customize the response body, status code and headers given by the application for many responses. All templates managed by S3-Proxy are Golang templates.","title":"Templates"},{"location":"feature-guide/templates/#managed-responses","text":"S3-Proxy will manage HTML and JSON responses automatically by default. This switch is performed according to the Accept request header. If no Accept header in found in the request, the HTML output will be used by default. Default templates can be found here .","title":"Managed responses"},{"location":"feature-guide/templates/#functions","text":"","title":"Functions"},{"location":"feature-guide/templates/#general-functions","text":"In all these templates, all Masterminds/sprig functions are available.","title":"General functions"},{"location":"feature-guide/templates/#s3-proxy-specific-functions","text":"In all these templates, S3-Proxy specific functions are available: humanSize with int input in order to transform bytes to human size requestURI with http.Request input in order to get the full request URI from incoming request requestScheme with http.Request input in order to get the scheme from incoming request requestHost with http.Request input in order to get the hostname from incoming request include with template name defined in helpers and context in order to execute a template with the ability to save result in a variable, use it pipelines, ... (Imported from Helm ). Example: {{ $var := include \"defined-name\" . }} toJson will allow to transform a string to a JSON compatible one toYaml will allow to transform a string to a YAML compatible one tpl is inspired from the Helm one. It allows to render a template in a template rendering session. The first parameter is the template and the second, variables to use in","title":"S3-Proxy specific functions"},{"location":"feature-guide/templates/#helpers","text":"Different helpers are available by default: main.userIdentifier will return the user identifier from the incoming request only if user exists main.headers.contentType will return the content type header from the incoming request main.body.errorJsonBody will return the json content body for an error","title":"Helpers"},{"location":"feature-guide/templates/#templates-data-structure-and-usage","text":"","title":"Templates data structure and usage"},{"location":"feature-guide/templates/#target-list","text":"This template is used in order to list all target buckets declared in the configuration file. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Targets Map[String] target The target map as coming from the configuration Available for: Response body Response headers Response status code","title":"Target List"},{"location":"feature-guide/templates/#folder-list","text":"This template is used in order to list files and folders in a bucket \"folder\". Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Entries [ Entry ] Folder entries BucketName String Bucket name Name String Target name Available for: Response body Response headers Response status code","title":"Folder List"},{"location":"feature-guide/templates/#not-found-error","text":"This template is used for all Not found errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code","title":"Not found error"},{"location":"feature-guide/templates/#unauthorized-error","text":"This template is used for all Unauthorized errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code","title":"Unauthorized error"},{"location":"feature-guide/templates/#forbidden-error","text":"This template is used for all Forbidden errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code","title":"Forbidden error"},{"location":"feature-guide/templates/#internal-server-error","text":"This template is used for all Internal server error errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code","title":"Internal Server Error"},{"location":"feature-guide/templates/#bad-request-error","text":"This template is used for all Bad Request errors. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Error Error Error raised and caught Available for: Response body Response headers Response status code","title":"Bad Request error"},{"location":"feature-guide/templates/#put","text":"This template is used for all PUT response. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang PutData PutData Put Data Available for: Response body Response headers Response status code","title":"Put"},{"location":"feature-guide/templates/#delete","text":"This template is used for all DELETE response. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang DeleteData DeleteData Delete Data Available for: Response body Response headers Response status code","title":"Delete"},{"location":"feature-guide/templates/#streamed-file","text":"This case is a special case, used only when a file is streamed from S3. This will allow to add headers to streamed files with GET requests. The following table will show the data structure available for the header template rendering: Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang StreamFile StreamFile Stream file object Available for: Response headers","title":"Streamed file"},{"location":"feature-guide/templates/#put-metadata-and-storage-class","text":"","title":"PUT Metadata and Storage class"},{"location":"feature-guide/templates/#put-metadata","text":"This case will be used for all PUT metadata templates. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Input PutInput PutInput structure data Key String The final S3 key generated for upload request","title":"PUT Metadata"},{"location":"feature-guide/templates/#put-storage-class","text":"This case will be used for all PUT storage class templates. Available data: Name Type Description User GenericUser Authenticated user if present in incoming request Input PutInput PutInput structure data Key String The final S3 key generated for upload request","title":"PUT Storage class"},{"location":"feature-guide/templates/#commonother-structures","text":"","title":"Common/Other structures"},{"location":"feature-guide/templates/#genericuser","text":"Generic user is a golang interface that will match all kind of users managed by application. These are the properties available: Name Type Description GetType String Get type of user (OIDC or BASIC) GetIdentifier String Get identifier (Username for basic auth user or Username or email for OIDC user) GetUsername String Get username GetName String Get name (only available for OIDC user) GetGroups [String] Get groups (only available for OIDC user) GetGivenName String Get given name (only available for OIDC user) GetFamilyName String Get family name (only available for OIDC user) GetEmail String Get email (only available for OIDC user) IsEmailVerified Boolean Is Email Verified ? (only available for OIDC user)","title":"GenericUser"},{"location":"feature-guide/templates/#entry","text":"Name Type Description Type String Entry type (FOLDER or FILE) Name String Entry name ETag String ETag from bucket (file only) LastModified Time Last modified entry Size Integer Entry file (file only) Key String Full key from S3 response Path String Access path to entry from web","title":"Entry"},{"location":"feature-guide/templates/#streamfile","text":"Name Type Description CacheControl String Cache control value from S3 Expires String Expires value from S3 ContentDisposition String Content disposition value from S3 ContentEncoding String Content encoding value from S3 ContentLanguage String Content language value from S3 ContentLength Integer Content length value from S3 ContentRange String Content range value from S3 ContentType String Content type value from S3 ETag String ETag value from S3 LastModified Time Last modified value from S3 Metadata Map[String]String Metadata value from S3","title":"StreamFile"},{"location":"feature-guide/templates/#putinput","text":"Name Type Description RequestPath String Request path Filename String Filename used for upload ContentType String File content type for upload ContentSize Integer File content size for upload","title":"PutInput"},{"location":"feature-guide/templates/#putdata","text":"Name Type Description Key String Full key from S3 response Filename String Filename used for upload ContentType String File content type for upload ContentSize Integer File content size for upload Metadata Map[String]String Metadata value from S3 StorageClass String Storage class","title":"PutData"},{"location":"feature-guide/templates/#deletedata","text":"Name Type Description Key String Full key from S3 response","title":"DeleteData"},{"location":"feature-guide/templates/#targetkeyrewritedata","text":"Name Type Description User GenericUser Authenticated user if present in incoming request Request http.Request HTTP Request object from golang Target Target The current target configuration Key String Full key from S3 response","title":"TargetKeyRewriteData"},{"location":"feature-guide/webhooks/","text":"Webhooks \u00b6 This feature have been created to have hooks on all type of requests managed by s3-proxy. Limitations \u00b6 These comes with some limitations: Only HTTP is supported. Why ? Because we aren't too much managing the maintenance of the app and managing different type of hooks will take a lot of efforts and time. If you need another type of message, we recommend you to develop a sidecar to this application that will transform the request. mTLS isn't supported. Same reason as before. All hooks are run in a Go routine and in a sequential way in this one. Webhook body isn't open to customization. Body \u00b6 There is a common way in the application of creating a webhook body. Every hook will have a body built on a common part and only \"input\" section is different. The main body is called the HookBody . Here are all cased for input metadata: GET: GetInputMetadataHookBody PUT: PutInputMetadataHookBody DELETE: DeleteInputMetadataHookBody HookBody \u00b6 Field Type Description action String Webhook action ( GET , PUT or DELETE ) requestPath String Request path inputMetadata Input metadata cases Input metadata outputMetadata OutputMetadataHookBody Output / result metadata (metadata generated from S3 results) target TargetHookBody Target data OutputMetadataHookBody \u00b6 Field Type Description bucket String Bucket name requested region String Region where the bucket is located s3Endpoint String S3 endpoint used key String Key requested from S3 bucket TargetHookBody \u00b6 Field Type Description name String Target name matching the request GetInputMetadataHookBody \u00b6 Field Type Description ifModifiedSince String If-Modified-Since header value ifMatch String If-Match header value ifNoneMatch String If-None-Match header value ifUnmodifiedSince String If-Unmodified-Since header value range String Range header value PutInputMetadataHookBody \u00b6 Field Type Description filename String Uploaded file name coming from request form contentType String Uploaded file content type contentSize Integer Uploaded file size DeleteInputMetadataHookBody \u00b6 In this specific case, there is nothing. The input data is null.","title":"Webhooks"},{"location":"feature-guide/webhooks/#webhooks","text":"This feature have been created to have hooks on all type of requests managed by s3-proxy.","title":"Webhooks"},{"location":"feature-guide/webhooks/#limitations","text":"These comes with some limitations: Only HTTP is supported. Why ? Because we aren't too much managing the maintenance of the app and managing different type of hooks will take a lot of efforts and time. If you need another type of message, we recommend you to develop a sidecar to this application that will transform the request. mTLS isn't supported. Same reason as before. All hooks are run in a Go routine and in a sequential way in this one. Webhook body isn't open to customization.","title":"Limitations"},{"location":"feature-guide/webhooks/#body","text":"There is a common way in the application of creating a webhook body. Every hook will have a body built on a common part and only \"input\" section is different. The main body is called the HookBody . Here are all cased for input metadata: GET: GetInputMetadataHookBody PUT: PutInputMetadataHookBody DELETE: DeleteInputMetadataHookBody","title":"Body"},{"location":"feature-guide/webhooks/#hookbody","text":"Field Type Description action String Webhook action ( GET , PUT or DELETE ) requestPath String Request path inputMetadata Input metadata cases Input metadata outputMetadata OutputMetadataHookBody Output / result metadata (metadata generated from S3 results) target TargetHookBody Target data","title":"HookBody"},{"location":"feature-guide/webhooks/#outputmetadatahookbody","text":"Field Type Description bucket String Bucket name requested region String Region where the bucket is located s3Endpoint String S3 endpoint used key String Key requested from S3 bucket","title":"OutputMetadataHookBody"},{"location":"feature-guide/webhooks/#targethookbody","text":"Field Type Description name String Target name matching the request","title":"TargetHookBody"},{"location":"feature-guide/webhooks/#getinputmetadatahookbody","text":"Field Type Description ifModifiedSince String If-Modified-Since header value ifMatch String If-Match header value ifNoneMatch String If-None-Match header value ifUnmodifiedSince String If-Unmodified-Since header value range String Range header value","title":"GetInputMetadataHookBody"},{"location":"feature-guide/webhooks/#putinputmetadatahookbody","text":"Field Type Description filename String Uploaded file name coming from request form contentType String Uploaded file content type contentSize Integer Uploaded file size","title":"PutInputMetadataHookBody"},{"location":"feature-guide/webhooks/#deleteinputmetadatahookbody","text":"In this specific case, there is nothing. The input data is null.","title":"DeleteInputMetadataHookBody"},{"location":"user-guide/aws-policy/","text":"AWS IAM Policy \u00b6 This application will need some rights on AWS. This is an example of a policy that allow access to <bucket-name> and files in it: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ // Needed for GET API/Action \"s3:ListBucket\" , \"s3:GetObject\" , // Needed for PUT API/Action \"s3:PutObject\" , // Needed for DELETE API/Action \"s3:DeleteObject\" ], \"Resource\" : [ \"arn:aws:s3:::<bucket-name>\" , \"arn:aws:s3:::<bucket-name>/*\" ] } ] }","title":"AWS IAM Policy"},{"location":"user-guide/aws-policy/#aws-iam-policy","text":"This application will need some rights on AWS. This is an example of a policy that allow access to <bucket-name> and files in it: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ // Needed for GET API/Action \"s3:ListBucket\" , \"s3:GetObject\" , // Needed for PUT API/Action \"s3:PutObject\" , // Needed for DELETE API/Action \"s3:DeleteObject\" ], \"Resource\" : [ \"arn:aws:s3:::<bucket-name>\" , \"arn:aws:s3:::<bucket-name>/*\" ] } ] }","title":"AWS IAM Policy"},{"location":"user-guide/deployment/","text":"Deployment \u00b6 Requirements \u00b6 To deploy, you must configure the application. You can read more about this here . Kubernetes - Helm \u00b6 A helm chart have been created to deploy this in a Kubernetes cluster. You can find it here: https://artifacthub.io/packages/helm/oxyno-zeta/s3-proxy Or directly from source: https://github.com/oxyno-zeta/helm-charts/tree/master/stable/s3-proxy Note This chart allow the configuration hot reload. If you change a configuration file and apply it, the Configmap will be updated in Kubernetes and Kubernetes will change the file mounted and linked to Configmap. This will take around 1 minute (according to my tests). Docker \u00b6 First, write the configuration file in a config folder. That one will be mounted. Run this command: docker run -d --name s3-proxy -p 8080 :8080 -p 9090 :9090 -v $PWD /conf:/proxy/conf oxynozeta/s3-proxy","title":"Deployment"},{"location":"user-guide/deployment/#deployment","text":"","title":"Deployment"},{"location":"user-guide/deployment/#requirements","text":"To deploy, you must configure the application. You can read more about this here .","title":"Requirements"},{"location":"user-guide/deployment/#kubernetes-helm","text":"A helm chart have been created to deploy this in a Kubernetes cluster. You can find it here: https://artifacthub.io/packages/helm/oxyno-zeta/s3-proxy Or directly from source: https://github.com/oxyno-zeta/helm-charts/tree/master/stable/s3-proxy Note This chart allow the configuration hot reload. If you change a configuration file and apply it, the Configmap will be updated in Kubernetes and Kubernetes will change the file mounted and linked to Configmap. This will take around 1 minute (according to my tests).","title":"Kubernetes - Helm"},{"location":"user-guide/deployment/#docker","text":"First, write the configuration file in a config folder. That one will be mounted. Run this command: docker run -d --name s3-proxy -p 8080 :8080 -p 9090 :9090 -v $PWD /conf:/proxy/conf oxynozeta/s3-proxy","title":"Docker"}]}